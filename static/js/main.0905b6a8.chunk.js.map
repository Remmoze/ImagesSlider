{"version":3,"sources":["atoms/helper.js","atoms/gradient.js","components/settings/gradient/colorItem.jsx","components/settings/gradient/colorsAdder.jsx","components/settings/components/settingsSlider.jsx","components/settings/modes/Gradient.jsx","components/settings/components/settingsCheckbox.jsx","components/settings/image/imageUpload.jsx","content/city.jpg","atoms/image.js","components/settings/modes/Image.jsx","components/settings/modes/Radial.jsx","atoms/dots.js","components/settings/modes/Dots.jsx","components/settings/modes/Blinking.jsx","atoms/synth.js","components/settings/modes/Synthwave.jsx","components/settings/modes/modesMenu.jsx","atoms/config.js","components/settings/modeSelector.jsx","components/settings/SettingsContainer.jsx","components/settings/SettingsOverlay.jsx","components/display/canvas/windowSize.jsx","components/display/canvas/useCanvas.jsx","components/display/drawing/GradientFactory.jsx","components/display/drawing/display modes/Dots/Vector2.js","components/display/drawing/display modes/Dots/Dot.js","components/display/drawing/display modes/Dots/Grid.js","components/display/drawing/display modes/dots.js","components/display/drawing/display modes/image.js","components/display/drawing/display modes/Synthwave/floor.js","components/display/drawing/display modes/Synthwave/background.js","content/house_sample.png","components/display/drawing/display modes/Synthwave/houseLoading.js","components/display/drawing/display modes/Synthwave/houses.js","components/display/drawing/display modes/synthwave.js","components/display/drawing/canvasUpdate.jsx","components/display/drawing/display modes/gradient.js","components/display/drawing/display modes/blinking.js","components/display/drawing/display modes/radial.js","components/display/canvas/Canvas.jsx","components/display/canvas/Display.jsx","components/MainContainer.jsx","index.js"],"names":["setProperty","setter","key","value","state","localStorageEffect","setSelf","onSet","savedValue","localStorage","getItem","JSON","parse","newValue","_","isReset","removeItem","setItem","stringify","gradientAtom","atom","default","speed","rotation","Math","PI","colors","effects","useGradientAtom","useRecoilState","gradient","setGradient","setSpeed","setRotation","setColors","addColor","color","setColorByIndex","index","deleteColorByIndex","splice","changeColor","setError","strColor","s","Option","style","isColor","ColorItem","blockDelete","useState","error","ListItem","disablePadding","ml","mr","sx","width","height","backgroundColor","border","borderColor","borderRadius","opacity","ListItemText","TextField","onChange","target","id","variant","defaultValue","IconButton","disabled","onClick","ColorsList","item","mt","container","direction","alignItems","length","floor","random","toString","toUpperCase","List","bgcolor","TransitionGroup","map","Collapse","Divider","SettingsSlider","label","min","max","step","setValue","Slider","e","valueLabelDisplay","Gradient","angle","toFixed","SettingsCheckbox","checked","setChecked","Checkbox","Typography","display","ImageUpload","imgURL","setImgURL","uploadInputRef","useRef","ref","type","accept","newImage","files","newUrl","URL","createObjectURL","revokeObjectURL","hidden","Button","current","click","imageAtom","imageUrl","City","speedX","speedY","scale","clampX","clampY","useImageAtom","image","setImage","setImageUrl","setSpeedX","setSpeedY","setScale","setClampX","setClampY","Image","Radial","dotsAtom","curve","count","showDots","showGrid","maxDistance","useDotsAtom","dots","setDots","setCurve","setCount","setShowDots","setShowGrid","setMaxDistance","Dots","Blinking","synthAtom","floorHeight","numberOfLines","useSynthAtom","synth","setSynth","setFloorHeight","setNumberOfLines","Synthwave","Modes","name","component","configAtom","mode","debug","useConfigAtom","config","setConfig","setMode","setDebug","Mode","mb","FormControl","fullWidth","InputLabel","Select","MenuItem","find","SettingsContainer","spacing","padding","justifyContent","gutterBottom","pb","clear","window","location","reload","SettingsOverlay","Box","position","top","left","maxWidth","SettingsRef","React","forwardRef","props","AnimatedSettingsOverlay","active","Slide","timeout","enter","exit","easing","in","appear","mountOnEnter","unmountOnExit","useWindowSize","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","frameCount","useCanvas","draw","canvasRef","console","log","animationFrameId","context","getContext","render","requestAnimationFrame","cancelAnimationFrame","getRadius","canvas","realRadius","sqrt","getRealRadius","colorStopWidth","radius","getColorStopWidth","getSpeed","addColorStops","i","colorOffset","addColorStop","createGradientType","storeGradient","x1","cos","y1","sin","x2","y2","createLinearGradient","getLinearGradient","Vector2","x","y","this","vector2","Dot","pos","vel","setVelocity","add","limit","fillStyle","beginPath","arc","fill","createDot","canv","h","v","r","g","b","f","p","q","t","get","num","res","hsvToRgb","Cell","point","Grid","cells","rows","columns","init","ceil","push","dot","addDot","cell","getCell","indexOf","getCoordsByIndex","xBoundary","yBoundary","j","intersects","grid","connectDots","dot1","dot2","distance","alpha","padStart","strokeStyle","lineWidth","lineCap","connectDotsCurved","connectDotsLine","moveTo","lineTo","stroke","bezierCurveTo","getBezier","lastSpeed","lastDistance","updateProperties","needsUpdate","removeDot","updateCount","populate","updateDots","fillRect","update","strokeRect","neighbours","getCellNeighbours","k","neighbour","z","connectNew","pattern","offsetX","offsetY","scalingX","scalingY","prevURL","updateImage","Storage","onload","createPattern","updatePattern","src","setTransform","resetTransform","translate","drawFloor","store","offset","scaleX","scaleY","grad","createGradient","amount","filter","pixelOffset","drawLines","drawBackground","getBGGradient","sunBox","sunSize","getSunBox","getSunGradient","drawSun","drawSunLines","globalCompositeOperation","getSunHazeGradient","drawSunHaze","housesImages","houseBox","housesImage","removeWhite","imageData","getImageData","data","putImageData","loadImage","url","Promise","resolve","parseHouses","document","createElement","content","createHousesGradient","imageURLs","drawImage","toDataURL","urls","pendingImages","all","then","images","loadHouseImages","housesCache","oldCount","addHousesToCache","oldOffset","drawHouses","HousesImage","slice","abs","shouldUpdate","unshift","pop","houseIndex","house","updateSynth","args","globalAlpha","createFillStyle","storage","createBlinking","createRadialGradient","getRadialGradient","createRadial","getDrawType","drawUpdate","prevMode","prevDimensions","CanvasUpdate","temp","font","textAlign","fillText","drawDefault","drawDebug","Canvas","Display","MainContainer","setCheck","bottom","theme","createTheme","palette","App","StrictMode","ThemeProvider","CssBaseline","ReactDOM","getElementById"],"mappings":"4aAAMA,EAAc,SAACC,EAAQC,GACzB,OAAO,SAACC,GACJF,GAAO,SAACG,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBF,EAAMC,SAIxCE,EACF,SAACH,GAAD,OACA,YAAyB,IAAtBI,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACFC,EAAaC,aAAaC,QAAQR,GACrB,OAAfM,GACAF,EAAQK,KAAKC,MAAMJ,IAGvBD,GAAM,SAACM,EAAUC,EAAGC,GAChBA,EAAUN,aAAaO,WAAWd,GAAOO,aAAaQ,QAAQf,EAAKS,KAAKO,UAAUL,SCZxFM,EAAeC,YAAK,CACtBlB,IAAK,WACLmB,QAAS,CACLC,MAAO,IACPC,SAAqB,EAAVC,KAAKC,GAAU,EAC1BC,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,YAGRC,QAAS,CAACtB,EAAmB,eAsClBuB,EAnCS,WAAO,IAAD,EACMC,YAAeV,GADrB,mBACnBW,EADmB,KACTC,EADS,KAwB1B,MAAO,CACHD,WACAE,SAvBahC,EAAY+B,EAAa,SAwBtCE,YAvBgBjC,EAAY+B,EAAa,YAwBzCG,UAvBclC,EAAY+B,EAAa,UAwBvCI,SAvBa,SAACC,GAAD,OAAWL,GAAY,SAAC3B,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBsB,OAAO,GAAD,mBAAMtB,EAAMsB,QAAZ,CAAoBU,UAwBtFC,gBAtBoB,SAACC,EAAOF,GAC5BL,GAAY,SAAC3B,GACT,IAAMsB,EAAM,YAAOtB,EAAMsB,QAEzB,OADAA,EAAOY,GAASF,EACT,2BAAKhC,GAAZ,IAAmBsB,eAmBvBa,mBAfuB,SAACD,GACxBP,GAAY,SAAC3B,GACT,IAAMsB,EAAM,YAAOtB,EAAMsB,QAEzB,OADAA,EAAOc,OAAOF,EAAO,GACd,2BAAKlC,GAAZ,IAAmBsB,iB,OC1BzBe,EAAc,SAACJ,EAAiBC,EAAOF,EAAOM,IANpC,SAACC,GACb,IAAMC,GAAI,IAAIC,QAASC,MAEvB,OADAF,EAAER,MAAQO,EACS,KAAZC,EAAER,MAIJW,CAAQX,GACTM,GAAS,IAGbA,GAAS,GACTL,EAAgBC,EAAOF,KA0CZY,EAvCG,SAAC,GAAmC,IAAjCZ,EAAgC,EAAhCA,MAAOE,EAAyB,EAAzBA,MAAOW,EAAkB,EAAlBA,YAAkB,EACDrB,IAAxCW,EADyC,EACzCA,mBAAoBF,EADqB,EACrBA,gBADqB,EAEvBa,oBAAS,GAFc,mBAE1CC,EAF0C,KAEnCT,EAFmC,KAIjD,OACI,eAACU,EAAA,EAAD,CAAUC,gBAAc,EAAxB,UACI,cAAC,IAAD,CACIC,GAAI,EACJC,GAAI,EACJC,GAAI,CACAC,MAAO,GACPC,OAAQ,GACRC,gBAAiBvB,EACjBwB,OAAQ,EACRC,YAAa,UACbC,aAAc,EACd,UAAW,CACPH,gBAAiBvB,EACjB2B,QAAS,CAAC,GAAK,GAAK,QAKhC,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB1B,EAAYJ,EAAiBC,EAAO6B,EAAOhE,MAAOuC,IAC5E0B,GAAG,iBACHC,QAAQ,WACRjC,MAAOe,EAAQ,QAAU,UACzBmB,aAAclC,MAGtB,cAACmC,EAAA,EAAD,CAAYC,SAAUvB,EAAawB,QAAS,kBAAMlC,EAAmBD,IAArE,SACI,cAAC,IAAD,UCRDoC,EA3BI,WAAO,IAAD,EACU9C,IAAvBE,EADa,EACbA,SAAUK,EADG,EACHA,SAElB,OACI,eAAC,IAAD,CAAMwC,MAAI,EAACC,IAAK,EAAhB,UACI,eAAC,IAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAA3C,UACI,cAAC,IAAD,CAAMJ,MAAI,EAAV,oBACA,cAAC,IAAD,CAAMA,MAAI,EAAV,SACI,cAACJ,EAAA,EAAD,CAAYC,SAAU1C,EAASJ,OAAOsD,QAAU,EAAGP,QAAS,kBAAMtC,EAf9E,IACAX,KAAKyD,MAAsB,SAAhBzD,KAAK0D,UACXC,SAAS,IACTC,gBAYO,SACI,cAAC,IAAD,WAIZ,cAACC,EAAA,EAAD,CAAM7B,GAAI,CAAEC,MAAO,OAAQ6B,QAAS,YAAaxB,aAAc,GAA/D,SACI,cAACyB,EAAA,EAAD,UACKzD,EAASJ,OAAO8D,KAAI,SAACpD,EAAOE,GAAR,OACjB,eAACmD,EAAA,EAAD,WACe,IAAVnD,GAAe,cAACoD,EAAA,EAAD,IAChB,cAAC,EAAD,CAAWzC,YAAanB,EAASJ,OAAOsD,OAAS,EAAG5C,MAAOA,EAAOE,MAAOA,MAF9DF,c,SCVxBuD,EAxBQ,SAAC,GAA8D,IAA5DrB,EAA2D,EAA3DA,aAAcsB,EAA6C,EAA7CA,MAAO1B,EAAsC,EAAtCA,SAAU2B,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KAAM3D,EAAY,EAAZA,MAAY,EACvDc,mBAASoB,GAD8C,mBAC1EnE,EAD0E,KACnE6F,EADmE,KAEjF,OACI,qCACI,cAAC,IAAD,CAAMrB,MAAI,EAAV,SAAYiB,IACZ,cAAC,IAAD,CAAMjB,MAAI,EAAV,SACI,cAACsB,EAAA,EAAD,CACIzC,GAAI,CAAEpB,SACN8B,SAAU,SAACgC,EAAG/F,GACV6F,EAAS7F,GACT+D,EAAS/D,IAEbmE,aAAcnE,EACd0F,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACN5F,MAAOA,EACPgG,kBAAkB,cCevBC,EA3BE,WAAO,IAJEC,EAIH,EACyBzE,IAApCE,EADW,EACXA,SAAUE,EADC,EACDA,SAAUC,EADT,EACSA,YAE5B,OACI,qCACI,cAAC,EAAD,CACIqC,aAAcxC,EAASR,MACvBsE,MAAO,QACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAW6B,EAAS7B,IAC9BiC,MAAON,EAASR,MAAQ,GAAK,OAAS,QAE1C,cAAC,EAAD,CACIgD,aAAcxC,EAASP,SACvBqE,MAAO,eApBGS,EAoB8BvE,EAASP,SAnBvD,GAAN,OAAU8E,EAAMC,QAAQ,GAAxB,mBAA8C,IAARD,EAAe7E,KAAKC,IAAI6E,QAAQ,GAAtE,aAoBYT,IAAK,EACLC,IAAe,EAAVtE,KAAKC,GACVsE,KAAM,IACN7B,SAAU,SAAC/D,GAAD,OAAW8B,EAAY9B,MAErC,cAAC,EAAD,QCTGoG,EAlBU,SAAC,GAAuC,IAArCjC,EAAoC,EAApCA,aAAcsB,EAAsB,EAAtBA,MAAO1B,EAAe,EAAfA,SAAe,EAC9BhB,mBAASoB,GADqB,mBACrDkC,EADqD,KAC5CC,EAD4C,KAE5D,OACI,eAAC,IAAD,CAAM7B,IAAK,EAAGtB,IAAK,IAAKqB,MAAI,EAA5B,UACI,cAAC+B,EAAA,EAAD,CACIF,QAASA,EACTtC,SAAU,SAACgC,EAAG/F,GACVsG,EAAWtG,GACX+D,EAAS/D,MAGjB,cAACwG,EAAA,EAAD,CAAY/B,GAAI,EAAGpB,GAAI,CAAEoD,QAAS,UAAlC,SACKhB,Q,SCiBFiB,EA7BK,SAAC,GAAkB,IAAhB3C,EAAe,EAAfA,SAAe,EACNhB,mBAAS,MADH,mBAC3B4D,EAD2B,KACnBC,EADmB,KAG5BC,EAAiBC,iBAAO,MAgB9B,OACI,qCACI,uBAAOC,IAAKF,EAAgBG,KAAK,OAAOC,OAAO,UAAUlD,SAZ5C,SAAC,GAAgB,IAC9BmD,EAD6B,EAAblD,OACEmD,MAAM,GACxBC,EAASC,IAAIC,gBAAgBJ,GAClB,OAAXP,GACAU,IAAIE,gBAAgBZ,GAExBC,EAAUQ,GACVrD,EAASqD,IAK4EI,QAAM,IACvF,cAACC,EAAA,EAAD,CAAQnD,QAjBG,WACfuC,EAAea,SAAWb,EAAea,QAAQC,SAgBhBzD,QAAQ,WAArC,8BC1BG,MAA0B,iCCKnC0D,GAAY3G,YAAK,CACnBlB,IAAK,QACLmB,QAAS,CACL2G,SAAUC,EACVC,QAAS,EACTC,OAAQ,EACRC,OAAO,EACPC,QAAQ,EACRC,QAAQ,GAEZ3G,QAAS,CAACtB,EAAmB,YAwBlBkI,GArBM,WAAO,IAAD,EACG1G,YAAekG,IADlB,mBAChBS,EADgB,KACTC,EADS,KAUvB,MAAO,CACHD,QACAE,YATgB1I,EAAYyI,EAAU,YAUtCE,UATc3I,EAAYyI,EAAU,UAUpCG,UATc5I,EAAYyI,EAAU,UAUpCI,SATa7I,EAAYyI,EAAU,SAUnCK,UATc9I,EAAYyI,EAAU,UAUpCM,UATc/I,EAAYyI,EAAU,YCU7BO,GA7BD,WAAO,IAAD,EACqET,KAA7EC,EADQ,EACRA,MAAOE,EADC,EACDA,YAAaC,EADZ,EACYA,UAAWC,EADvB,EACuBA,UAAWC,EADlC,EACkCA,SAAUC,EAD5C,EAC4CA,UAAWC,EADvD,EACuDA,UAEvE,OACI,qCACI,cAAC,EAAD,CACIzE,aAAckE,EAAMN,OACpBtC,MAAO,UAAY4C,EAAMN,OACzBrC,KAAM,GACNC,IAAK,GACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAWwI,EAAUxI,MAEnC,cAAC,EAAD,CACImE,aAAckE,EAAML,OACpBvC,MAAO,UAAY4C,EAAML,OACzBtC,KAAM,GACNC,IAAK,GACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAWyI,EAAUzI,MAEnC,cAAC,EAAD,CAAkBmE,aAAckE,EAAMJ,MAAOxC,MAAO,eAAgB1B,SAAU,SAAC/D,GAAD,OAAW0I,EAAS1I,MAClG,cAAC,EAAD,CAAkBmE,aAAckE,EAAMH,OAAQzC,MAAO,UAAW1B,SAAU,SAAC/D,GAAD,OAAW2I,EAAU3I,MAC/F,cAAC,EAAD,CAAkBmE,aAAckE,EAAMF,OAAQ1C,MAAO,UAAW1B,SAAU,SAAC/D,GAAD,OAAW4I,EAAU5I,MAC/F,cAAC,EAAD,CAAa+D,SAAU,SAACqD,GAAD,OAAYmB,EAAYnB,UCP5C0B,GAnBA,WAAO,IAAD,EACcrH,IAAvBE,EADS,EACTA,SAAUE,EADD,EACCA,SAElB,OACI,qCACI,cAAC,EAAD,CACIsC,aAAcxC,EAASR,MACvBsE,MAAO,QACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN7B,SAAUlC,EACVI,MAAON,EAASR,MAAQ,GAAK,OAAS,QAE1C,cAAC,EAAD,QChBN4H,GAAW9H,YAAK,CAClBlB,IAAK,OACLmB,QAAS,CACL8H,MAAO,EACP7H,MAAO,GACP8H,MAAO,IACPC,UAAU,EACVC,UAAU,EACVC,YAAa,KAEjB5H,QAAS,CAACtB,EAAmB,WAwBlBmJ,GArBK,WAAO,IAAD,EACE3H,YAAeqH,IADjB,mBACfO,EADe,KACTC,EADS,KAUtB,MAAO,CACHD,OACAE,SATa3J,EAAY0J,EAAS,SAUlC1H,SATahC,EAAY0J,EAAS,SAUlCE,SATa5J,EAAY0J,EAAS,SAUlCG,YATgB7J,EAAY0J,EAAS,YAUrCI,YATgB9J,EAAY0J,EAAS,YAUrCK,eATmB/J,EAAY0J,EAAS,iBCgCjCM,GAnDF,WAAO,IAAD,EAC0ER,KAAjFC,EADO,EACPA,KAAME,EADC,EACDA,SAAU3H,EADT,EACSA,SAAU4H,EADnB,EACmBA,SAAUC,EAD7B,EAC6BA,YAAaC,EAD1C,EAC0CA,YAAaC,EADvD,EACuDA,eAEtE,OACI,qCACI,cAAC,EAAD,CACIzF,aAAcmF,EAAKnI,MACnBsE,MAAO,WAAa6D,EAAKnI,MAAQ,YACjCuE,IAAK,EACLC,IAAK,GACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAW6B,EAAS7B,MAElC,cAAC,EAAD,CACImE,aAAcmF,EAAKL,MACnBxD,MAAO,WAAa6D,EAAKL,MACzBvD,IAAK,EACLC,IAAK,IACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAWyJ,EAASzJ,MAElC,cAAC,EAAD,CACImE,aAAcmF,EAAKF,YACnB3D,MAAO,kBAAoB6D,EAAKF,YAAc,UAC9C1D,IAAK,IACLC,IAAK,IACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAW4J,EAAe5J,MAExC,cAAC,EAAD,CACImE,aAAcmF,EAAKN,MACnBvD,MAAO,YACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN7B,SAAU,SAAC/D,GAAD,OAAWwJ,EAASxJ,MAElC,cAAC,EAAD,CACImE,aAAcmF,EAAKJ,SACnBzD,MAAO,YACP1B,SAAU,SAAC/D,GAAD,OAAW0J,EAAY1J,MAErC,cAAC,EAAD,CACImE,aAAcmF,EAAKH,SACnB1D,MAAO,YACP1B,SAAU,SAAC/D,GAAD,OAAW2J,EAAY3J,UC3BlC8J,GAlBE,WAAO,IAAD,EACYrI,IAAvBE,EADW,EACXA,SAAUE,EADC,EACDA,SAClB,OACI,qCACI,cAAC,EAAD,CACIsC,aAAcxC,EAASR,MACvBsE,MAAO,QACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN7B,SAAUlC,EACVI,MAAON,EAASR,MAAQ,GAAK,OAAS,QAE1C,cAAC,EAAD,QCfN4I,GAAY9I,YAAK,CACnBlB,IAAK,QACLmB,QAAS,CACL8I,YAAa,EAAI,EACjBC,cAAe,IAEnBzI,QAAS,CAACtB,EAAmB,YAgBlBgK,GAbM,WAAO,IAAD,EACGxI,YAAeqI,IADlB,mBAChBI,EADgB,KACTC,EADS,KAMvB,MAAO,CACHD,QACAE,eALmBxK,EAAYuK,EAAU,eAMzCE,iBALqBzK,EAAYuK,EAAU,mBCYpCG,GAzBG,WAAO,IAAD,EACgCL,KAA5CC,EADY,EACZA,MAAOE,EADK,EACLA,eAAgBC,EADX,EACWA,iBAE/B,OACI,qCACI,cAAC,EAAD,CACInG,aAAkC,IAApBgG,EAAMH,YACpBvE,MAAO,kBAAwC,IAApB0E,EAAMH,aAAmB7D,QAAQ,GAC5DT,IAAK,GACLC,IAAK,GACLC,KAAM,EACN7B,SAAU,SAACrD,GAAD,OAAc2J,EAAe3J,EAAW,QAEtD,cAAC,EAAD,CACIyD,aAAcgG,EAAMF,cACpBxE,MAAO,oBAAsB0E,EAAMF,cACnCvE,IAAK,GACLC,IAAK,GACLC,KAAM,EACN7B,SAAU,SAACrD,GAAD,OAAc4J,EAAiB5J,UCY1C8J,GA3BD,CACV,CACIC,KAAM,OACNC,UAAW,cAAC,GAAD,KAEf,CACID,KAAM,WACNC,UAAW,cAAC,GAAD,KAEf,CACID,KAAM,WACNC,UAAW,cAAC,EAAD,KAEf,CACID,KAAM,QACNC,UAAW,cAAC,GAAD,KAEf,CACID,KAAM,SACNC,UAAW,cAAC,GAAD,KAEf,CACID,KAAM,YACNC,UAAW,cAAC,GAAD,MC3BbC,GAAa1J,YAAK,CACpBlB,IAAK,SACLmB,QAAS,CACL0J,KAAM,YACNC,OAAO,GAEXrJ,QAAS,CAACtB,EAAmB,aAgBlB4K,GAbO,WAAO,IAAD,EACIpJ,YAAeiJ,IADnB,mBACjBI,EADiB,KACTC,EADS,KAMxB,MAAO,CACHD,SACAE,QALYpL,EAAYmL,EAAW,QAMnCE,SALarL,EAAYmL,EAAW,WCe7BG,GAvBF,WAAO,IAAD,EACaL,KAApBC,EADO,EACPA,OAAQE,EADD,EACCA,QAGhB,OACI,qCACI,cAAC,IAAD,CAAMzG,MAAI,EAAC4G,GAAI,EAAf,SACI,eAACC,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,2BACA,cAACC,EAAA,EAAD,CAAQxL,MAAO+K,EAAOH,KAAMnF,MAAM,eAAe1B,SAP9C,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBiH,EAAQjH,EAAOhE,QAOlC,SACKwK,GAAMnF,KAAI,SAACuF,GAAD,OACP,cAACa,EAAA,EAAD,CAA0BzL,MAAO4K,EAAKH,KAAtC,SACKG,EAAKH,MADKG,EAAKH,gBAOnCD,GAAMkB,MAAK,SAACd,GAAD,OAAUA,EAAKH,OAASM,EAAOH,QAAMF,cCM9CiB,GAzBW,WAOtB,OACI,eAAC,IAAD,CAAMjH,WAAS,EAACkH,QAAS,EAAGvI,GAAI,CAAEwI,QAAS,GAA3C,UACI,eAAC,IAAD,CAAMnH,WAAS,EAACF,MAAI,EAACG,UAAU,MAAMmH,eAAe,SAASlH,WAAW,SAAxE,UACI,cAAC4B,EAAA,EAAD,CAAYuF,cAAY,EAAC7H,QAAQ,KAAKkH,GAAI,EAAGhI,GAAI,EAAjD,sBAGA,cAACgB,EAAA,EAAD,CAAY4H,GAAI,EAAG1H,QAZR,WAGnB,OAFAhE,aAAa2L,QACbC,OAAOC,SAASC,UACT,GASC,SACI,cAAC,IAAD,SAIR,cAAC,IAAD,CAAM1H,WAAS,EAACF,MAAI,EAACG,UAAU,SAA/B,SACI,cAAC,GAAD,UCrBV0H,GAAkB,WACpB,OACI,cAACC,EAAA,EAAD,CACIjJ,GAAI,CACAkJ,SAAU,WACVC,IAAK,EACLC,KAAM,EACNnJ,MAAO,OACPoJ,SAAU,IACVlJ,gBAAiB,YACjBG,aAAc,GARtB,SAWI,cAAC,GAAD,OAKNgJ,GAAcC,IAAMC,YAAW,SAACC,EAAO/F,GACzC,OACI,6CAAKA,IAAKA,GAAS+F,GAAnB,aACI,cAAC,GAAD,UAKNC,GAA0B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC/B,OACI,cAACC,EAAA,EAAD,CACIC,QAAS,CAAEC,MAAO,IAAKC,KAAM,KAC7BC,OAAQ,CAAEF,MAAO,8BACjBxI,UAAU,QACV2I,GAAIN,EACJO,QAAQ,EACRC,cAAY,EACZC,eAAa,EAPjB,SASI,cAACd,GAAD,OC5BGe,GAZO,WAAO,IAAD,EACY3K,mBAAS,CAACmJ,OAAOyB,WAAYzB,OAAO0B,cADhD,mBACjBC,EADiB,KACLC,EADK,KASxB,OAPAC,qBAAU,WACN,IAAMC,EAAe,kBAAMF,EAAc,CAAC5B,OAAOyB,WAAYzB,OAAO0B,eAGpE,OADA1B,OAAO+B,iBAAiB,UAAU,kBAAMD,OACjC,kBAAM9B,OAAOgC,oBAAoB,SAAUF,MACnD,IAEIH,GCHPM,GAAa,EA+BFC,GA9BG,SAACC,GACf,IAAMC,EAAYxH,iBAAO,MAEjBiE,EAAWD,KAAXC,OACAzB,EAASD,KAATC,KACA3H,EAAaF,IAAbE,SACA0G,EAAUD,KAAVC,MACA8B,EAAUD,KAAVC,MAoBR,OAlBA4D,qBAAU,WACNQ,QAAQC,IAAInN,KAAK0D,UACjB,IAEI0J,EADEC,EADSJ,EAAU5G,QACFiH,WAAW,MAUlC,OAPe,SAATC,IACFT,KACAE,EAAKK,EAASP,GAAY,CAAEpD,SAAQzB,OAAM3H,WAAU0G,QAAO8B,UAC3DsE,EAAmBvC,OAAO2C,sBAAsBD,GAEpDA,GAEO,WACH1C,OAAO4C,qBAAqBL,MAEjC,CAACJ,EAAMtD,EAAQzB,EAAM3H,EAAU0G,EAAO8B,IAElCmE,GC5BLS,GAAY,SAACC,EAAQzN,EAAQqJ,GAE/B,IAAIqE,EAVc,SAACD,GACnB,OAAO3N,KAAK6N,KAAK,SAAAF,EAAO1L,MAAS,GAAhB,SAAoB0L,EAAOzL,OAAU,IAAK,EAS1C4L,CAAcH,GAG3BI,EATkB,SAACC,EAAQ9N,GAC/B,OAAiB,EAAT8N,EAAc9N,EAAOsD,OAQRyK,CAAkBL,EAAY1N,GAE/C8N,EAAS,EASb,MARa,aAATzE,EAEAyE,EAASJ,EAAaG,EACN,aAATxE,GAAgC,WAATA,IAE9ByE,EAASJ,EAAaG,GAGnBC,GAaLE,GAAW,SAACpB,EAAYhN,GAAb,OAAwBgN,EAAahN,EAAS,KAEzDqO,GAAgB,SAAC7N,EAAUR,EAAOI,GACpC,IAAK,IAAIkO,EAAI,EAAGA,EAAIlO,EAAOsD,OAAQ4K,IAAK,CACpC,IAAIC,GAAgBD,EAAItO,GAASI,EAAOsD,OAAUtD,EAAOsD,OACzDlD,EAASgO,aAAaD,EAAanO,EAAOkO,IAE9C,OAAO9N,GAGLiO,GAAqB,SAAClB,EAASmB,EAAe1B,EAAYvD,GAC5D,IAAIoE,EAASN,EAAQM,OACfK,EAASN,GAAUC,EAAQa,EAActO,OAAQqJ,GACjDjJ,EAvBgB,SAAC+M,EAAStN,EAAUiO,GAC1C,IAAIL,EAASN,EAAQM,OAEjBc,EAAKzO,KAAK0O,KAAK3O,EAAWC,KAAKC,IAAM+N,EAASL,EAAO1L,MAAQ,EAC7D0M,EAAK3O,KAAK4O,KAAK7O,EAAWC,KAAKC,IAAM+N,EAASL,EAAOzL,OAAS,EAC9D2M,EAAK7O,KAAK0O,KAAK3O,GAAYiO,EAASL,EAAO1L,MAAQ,EACnD6M,EAAK9O,KAAK4O,KAAK7O,GAAYiO,EAASL,EAAOzL,OAAS,EAExD,OAAOmL,EAAQ0B,qBAAqBN,EAAIE,EAAIE,EAAIC,GAe/BE,CAAkB3B,EAASmB,EAAczO,SAAUiO,GAChElO,EAAQoO,GAASpB,EAAY0B,EAAc1O,OAE/C,OAAOqO,GAAc7N,EAAUR,EAAO0O,EAActO,S,2BCpCzC+O,G,WAhBX,WAAYC,EAAGC,GAAI,qBACfC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,E,wCAGb,SAAIE,GACAD,KAAKF,GAAKG,EAAQH,EAClBE,KAAKD,GAAKE,EAAQF,I,mBAGtB,SAAMxB,GACFyB,KAAKF,GAAKE,KAAKF,EAAIvB,EAAO1L,OAAS0L,EAAO1L,MAC1CmN,KAAKD,GAAKC,KAAKD,EAAIxB,EAAOzL,QAAUyL,EAAOzL,W,KCX7CoN,G,WACF,WAAYJ,EAAGC,EAAGvO,GAAQ,qBACtBwO,KAAKG,IAAM,IAAIN,GAAQC,EAAGC,GAC1BC,KAAKI,IAAM,IAAIP,GAAQ,EAAG,GAE1BG,KAAKvK,MAAQ7E,KAAK0D,SAAW1D,KAAKC,GAAK,EAEvCmP,KAAKK,YAAY,IACjBL,KAAKxO,MAAQA,GAAS,U,gDAI1B,SAAYd,GACRA,GAAS,IAAO,GAChBsP,KAAKI,IAAIN,EAAIpP,EAAQE,KAAK0O,IAAIU,KAAKvK,OACnCuK,KAAKI,IAAIL,EAAIrP,EAAQE,KAAK4O,IAAIQ,KAAKvK,S,uBAGvC,SAAU8C,GAGN,MAAO,CAFCyH,KAAKG,IAAIL,EAAIvH,EAAQ3H,KAAK0O,IAAIU,KAAKvK,OACnCuK,KAAKG,IAAIJ,EAAIxH,EAAQ3H,KAAK4O,IAAIQ,KAAKvK,U,oBAI/C,SAAO8I,GACHyB,KAAKG,IAAIG,IAAIN,KAAKI,KAClBJ,KAAKG,IAAII,MAAMhC,K,oBAGnB,SAAON,GACHA,EAAQuC,UAAYR,KAAKxO,MAEzByM,EAAQwC,YACRxC,EAAQyC,IAAIV,KAAKG,IAAIL,EAAGE,KAAKG,IAAIJ,EAAG,EAAG,EAAG,EAAInP,KAAKC,IACnDoN,EAAQ0C,W,KA8DhB,IAAMC,GAAY,SAACC,GACf,OAAO,IAAIX,GAAIW,EAAKhO,MAAQjC,KAAK0D,SAAUuM,EAAK/N,OAASlC,KAAK0D,SA3DlE,SAAkBwM,EAAG9O,EAAG+O,GACpB,IAAIC,EAAGC,EAAGC,EAENlC,EAAIpO,KAAKyD,MAAU,EAAJyM,GACfK,EAAQ,EAAJL,EAAQ9B,EACZoC,EAAIL,GAAK,EAAI/O,GACbqP,EAAIN,GAAK,EAAII,EAAInP,GACjBsP,EAAIP,GAAK,GAAK,EAAII,GAAKnP,GAE3B,OAAQgN,EAAI,GACR,QACA,KAAK,EACDgC,EAAID,EACJE,EAAIK,EACJJ,EAAIE,EACJ,MAEJ,KAAK,EACDJ,EAAIK,EACJJ,EAAIF,EACJG,EAAIE,EACJ,MAEJ,KAAK,EACDJ,EAAII,EACJH,EAAIF,EACJG,EAAII,EACJ,MAEJ,KAAK,EACDN,EAAII,EACJH,EAAII,EACJH,EAAIH,EACJ,MAEJ,KAAK,EACDC,EAAIM,EACJL,EAAIG,EACJF,EAAIH,EACJ,MAEJ,KAAK,EACDC,EAAID,EACJE,EAAIG,EACJF,EAAIG,EAKZ,IAAIE,EAAM,SAACC,GACP,IAAIC,EAAM7Q,KAAKyD,MAAMmN,GAAKjN,SAAS,IAEnC,OADIkN,EAAIrN,OAAS,IAAGqN,EAAM,IAAMA,GACzBA,GAGX,MAAO,IAAMF,EAAQ,IAAJP,GAAWO,EAAQ,IAAJN,GAAWM,EAAQ,IAAJL,GAIyBQ,CAAS9Q,KAAK0D,SAAU,EAAG,KCnGjGqN,G,WACF,WAAY7B,EAAGC,EAAGlN,EAAOC,GAAS,qBAC9BkN,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKnN,MAAQA,EACbmN,KAAKlN,OAASA,EAEdkN,KAAKnH,KAAO,G,+CAGhB,SAAW+I,GACP,OACIA,EAAM9B,GAAKE,KAAKF,GAAK8B,EAAM7B,GAAKC,KAAKD,GAAK6B,EAAM9B,EAAIE,KAAKF,EAAIE,KAAKnN,OAAS+O,EAAM7B,EAAIC,KAAKD,EAAIC,KAAKlN,W,KAiGhG+O,G,WA3FX,WAAYtD,EAAQ5F,GAAc,qBAC9BqH,KAAK8B,MAAQ,GACb9B,KAAKrH,YAAeA,EAAc,IAAO/H,KAAK6N,KAAK,GAEnDuB,KAAK+B,KAAO,EACZ/B,KAAKgC,QAAU,EAEfhC,KAAKiC,KAAK1D,G,yCAGd,SAAKA,GACDyB,KAAK8B,MAAQ,GACb9B,KAAKgC,QAAUpR,KAAKsR,KAAK3D,EAAO1L,MAAQmN,KAAKrH,aAC7CqH,KAAK+B,KAAOnR,KAAKsR,KAAK3D,EAAOzL,OAASkN,KAAKrH,aAC3C,IAAK,IAAIqG,EAAI,EAAGA,EAAIgB,KAAK+B,KAAO/B,KAAKgC,QAAShD,IAAK,CAC/C,IAAIc,EAAKd,EAAIgB,KAAKgC,QAAWhC,KAAKrH,YAC9BoH,EAAInP,KAAKyD,MAAM2K,EAAIgB,KAAKgC,SAAWhC,KAAKrH,YACxC9F,EAAQjC,KAAKqE,IAAI6K,EAAIE,KAAKrH,YAAa4F,EAAO1L,OAASiN,EACvDhN,EAASlC,KAAKqE,IAAI8K,EAAIC,KAAKrH,YAAa4F,EAAOzL,QAAUiN,EAC7DC,KAAK8B,MAAMK,KAAK,IAAIR,GAAK7B,EAAGC,EAAGlN,EAAOC,O,sBAI9C,SAAS+F,GAAO,IAAD,iBACOA,GADP,IACX,2BAAwB,CAAC,IAAduJ,EAAa,QACpBpC,KAAKqC,OAAOD,IAFL,iC,oBAMf,SAAOA,GACH,IAAItC,EAAIlP,KAAKyD,MAAM+N,EAAIjC,IAAIL,EAAIE,KAAKrH,aAChCoH,EAAInP,KAAKyD,MAAM+N,EAAIjC,IAAIJ,EAAIC,KAAKrH,aAChC2J,EAAOtC,KAAK8B,MAAM/B,EAAIC,KAAKgC,QAAUlC,GACpCwC,EAGDA,EAAKzJ,KAAKsJ,KAAKC,GAFftE,QAAQvL,MAAM,oDAAqD6P,EAAKrC,EAAGD,K,uBAMnF,SAAUsC,GACN,IAAIE,EAAOtC,KAAKuC,QAAQ3R,KAAKyD,MAAM+N,EAAIjC,IAAIL,EAAIE,KAAKrH,aAAc/H,KAAKyD,MAAM+N,EAAIjC,IAAIJ,EAAIC,KAAKrH,cAC9F2J,EAAKzJ,KAAKjH,OAAO0Q,EAAKzJ,KAAK2J,QAAQJ,GAAM,K,qBAG7C,SAAQtC,EAAGC,GACP,OAAOC,KAAK8B,MAAM/B,EAAIC,KAAKgC,QAAUlC,K,8BAGzC,SAAiBpO,GACb,MAAO,CAAEoO,EAAGpO,EAAQsO,KAAKgC,QAASjC,EAAGnP,KAAKyD,MAAM3C,EAAQsO,KAAKgC,Y,+BAGjE,SAAkBtQ,GAAO,MAMNsO,KAAKyC,iBAAiB/Q,GAA/BoO,EANe,EAMfA,EAAGC,EANY,EAMZA,EACL+B,EAAQ,GACRY,EAAY5C,EAAI,EAAIE,KAAKgC,QACzBW,EAAY5C,EAAI,EAAIC,KAAK+B,KAW7B,OAVIW,IACAZ,EAAMK,KAAKnC,KAAKuC,QAAQzC,EAAI,EAAGC,IAC3BA,EAAI,GAAG+B,EAAMK,KAAKnC,KAAKuC,QAAQzC,EAAI,EAAGC,EAAI,KAE9C4C,GACAb,EAAMK,KAAKnC,KAAKuC,QAAQzC,EAAGC,EAAI,IAE/B2C,GAAaC,GACbb,EAAMK,KAAKnC,KAAKuC,QAAQzC,EAAI,EAAGC,EAAI,IAEhC+B,I,oBAGX,WACI,IAAK,IAAI9C,EAAI,EAAGA,EAAIgB,KAAK8B,MAAM1N,OAAQ4K,IAGnC,IAFA,IAAIsD,EAAOtC,KAAK8B,MAAM9C,GAEb4D,EAAI,EAAGA,EAAIN,EAAKzJ,KAAKzE,OAAQwO,IAAK,CACvC,IAAIR,EAAME,EAAKzJ,KAAK+J,GACfN,EAAKO,WAAWT,EAAIjC,OACrBmC,EAAKzJ,KAAKjH,OAAO0Q,EAAKzJ,KAAK2J,QAAQJ,GAAM,GACzCpC,KAAKqC,OAAOD,S,KCnG5BhJ,GAAO,GACP0J,GAAO,KAiBLC,GAAc,SAAC9E,EAAS+E,EAAMC,EAAMtK,EAAaJ,GACnD,IAAI2K,EAAWtS,KAAK6N,KAAK,SAACwE,EAAK9C,IAAIL,EAAIkD,EAAK7C,IAAIL,EAAM,GAA7B,SAAkCmD,EAAK9C,IAAIJ,EAAIiD,EAAK7C,IAAIJ,EAAM,IAEvF,KAAImD,EAAWvK,GAAf,CAgBA,IAAIwK,EAAQvS,KAAKyD,MAAM,IAAO,IAAM6O,EAAYvK,GAC3CpE,SAAS,IACT6O,SAAS,EAAG,KACb5R,EAAQyM,EAAQ0B,qBAAqBqD,EAAK7C,IAAIL,EAAGkD,EAAK7C,IAAIJ,EAAGkD,EAAK9C,IAAIL,EAAGmD,EAAK9C,IAAIJ,GACtFvO,EAAM0N,aAAa,EAAG8D,EAAKxR,MAAQ2R,GACnC3R,EAAM0N,aAAa,EAAG+D,EAAKzR,MAAQ2R,GACnClF,EAAQoF,YAAc7R,EACtByM,EAAQqF,UAAiD,GAApC,EAAIJ,EAAWvK,EAAc,IAClDsF,EAAQsF,QAAU,QACdhL,EACAiL,GAAkBvF,EAAS+E,EAAMC,EAAMC,EAAUvK,EAAaJ,GAE9DkL,GAAgBxF,EAAS+E,EAAMC,KAIjCQ,GAAkB,SAACxF,EAAS+E,EAAMC,GACpChF,EAAQwC,YACRxC,EAAQyF,OAAOV,EAAK7C,IAAIL,EAAGkD,EAAK7C,IAAIJ,GACpC9B,EAAQ0F,OAAOV,EAAK9C,IAAIL,EAAGmD,EAAK9C,IAAIJ,GACpC9B,EAAQ2F,UAGNJ,GAAoB,SAACvF,EAAS+E,EAAMC,EAAMC,EAAUvK,EAAaJ,GACnE0F,EAAQwC,YACRxC,EAAQyF,OAAOV,EAAK7C,IAAIL,EAAGkD,EAAK7C,IAAIJ,GACpC9B,EAAQ4F,cAAR,MAAA5F,EAAO,YACA+E,EAAKc,UAAWZ,EAAWvK,EAAeJ,IAD1C,mBAEA0K,EAAKa,UAAWZ,EAAWvK,EAAeJ,IAF1C,CAGH0K,EAAK9C,IAAIL,EACTmD,EAAK9C,IAAIJ,KAEb9B,EAAQ2F,UA4BRG,GAAY,EACZC,GAAe,EACbC,GAAmB,SAAChG,EAASpF,EAAMqL,GACjC9K,GAAKhF,SAAWyE,EAAKL,OAjGT,SAACyF,EAASpF,GAC1B,GAAIO,GAAKhF,OAASyE,EAAKL,MAAO,CAC1B,IAAK,IAAIwG,EAAI5F,GAAKhF,OAAS,EAAG4K,EAAInG,EAAKL,MAAQ,EAAGwG,IAC9C8D,GAAKqB,UAAU/K,GAAK4F,IAExB5F,GAAKhF,OAASyE,EAAKL,WAEnB,IAAK,IAAIwG,EAAI5F,GAAKhF,OAAQ4K,EAAInG,EAAKL,MAAOwG,IAAK,CAC3C,IAAMoD,EAAMxB,GAAU3C,EAAQM,QAC9BnF,GAAK+I,KAAKC,GACG,OAATU,IAAeA,GAAKT,OAAOD,IAwFnCgC,CAAYnG,EAASpF,GAGrBkL,KAAclL,EAAKnI,QACnB0I,GAAKxE,KAAI,SAACwN,GAAD,OAASA,EAAI/B,YAAYxH,EAAKnI,UACvCqT,GAAYlL,EAAKnI,QAGjBwT,GAAeF,KAAiBnL,EAAKF,gBACrCmK,GAAO,IAAIjB,GAAK5D,EAAQM,OAAQ1F,EAAKF,cAChC0L,SAASjL,IACd4K,GAAenL,EAAKF,cAItB2L,GAAa,SAACrG,EAASpF,EAAMqL,GAC/BD,GAAiBhG,EAASpF,EAAMqL,GAEhCjG,EAAQuC,UAAY,OACpBvC,EAAQsG,SAAS,EAAG,EAAGtG,EAAQM,OAAO1L,MAAOoL,EAAQM,OAAOzL,QAJb,qBAO7BsG,IAP6B,IAO/C,2BAAwB,CAAC,IAAdgJ,EAAa,QACpBA,EAAIoC,OAAOvG,EAAQM,QACf1F,EAAKJ,UAAU2J,EAAIjE,OAAOF,IATa,8BAe/C,GAHA6E,GAAK0B,SAGD3L,EAAKH,SACL,IAAK,IAAIsG,EAAI,EAAGA,EAAI8D,GAAKhB,MAAM1N,OAAQ4K,IAAK,CAAC,IAAD,EACV8D,GAAKhB,MAAM9C,GAAnCc,EADkC,EAClCA,EAAGC,EAD+B,EAC/BA,EAAGlN,EAD4B,EAC5BA,MAAOC,EADqB,EACrBA,OACnBmL,EAAQqF,UAAY,EACpBrF,EAAQoF,YAAc,MACtBpF,EAAQwG,WAAW3E,EAAGC,EAAGlN,EAAOC,GAKxCmL,EAAQuC,UAAY,UACpBvC,EAAQqF,UAAY,EAtEL,SAACrF,EAAStF,EAAaJ,GACtC,IAAK,IAAIyG,EAAI,EAAGA,EAAI8D,GAAKhB,MAAM1N,OAAQ4K,IAInC,IAHA,IAAMsD,EAAOQ,GAAKhB,MAAM9C,GAClB0F,EAAa5B,GAAK6B,kBAAkB3F,GAEjC4D,EAAI,EAAGA,EAAIN,EAAKzJ,KAAKzE,OAAQwO,IAAK,CAGvC,IAFA,IAAII,EAAOV,EAAKzJ,KAAK+J,GAEZgC,EAAIhC,EAAGgC,EAAItC,EAAKzJ,KAAKzE,OAAQwQ,IAAK,CACvC,IAAI3B,EAAOX,EAAKzJ,KAAK+L,GACrB7B,GAAY9E,EAAS+E,EAAMC,EAAMtK,EAAaJ,GAIlD,IAAK,IAAIqM,EAAI,EAAGA,EAAIF,EAAWtQ,OAAQwQ,IAEnC,IADA,IAAIC,EAAYH,EAAWE,GAClBE,EAAI,EAAGA,EAAID,EAAUhM,KAAKzE,OAAQ0Q,IAAK,CAC5C,IAAI7B,EAAO4B,EAAUhM,KAAKiM,GAC1B/B,GAAY9E,EAAS+E,EAAMC,EAAMtK,EAAaJ,KAqD9DwM,CAAW9G,EAASpF,EAAKF,YAAaE,EAAKN,Q,SClJ3CyM,GAAU,KAMVpN,GAAQ,IAAIQ,MAEZ6M,GAAU,EACVC,GAAU,EAEVC,GAAW,EACXC,GAAW,EA6CXC,GAAU,GACRC,GAAc,SAACrH,EAAD,GAAwC,IAA5B7G,EAA2B,EAA3BA,SAAamO,EAAc,6BACnDnO,IAAaiO,MAEbzN,GAAQ,IAAIQ,OACNoN,OAAS,YA7DD,SAACvH,EAASrG,GAC5BkG,QAAQC,IAAI,eACZiH,GAAU/G,EAAQwH,cAAc7N,EAAO,UA4D/B8N,CAAczH,EAASrG,KAE3BA,GAAM+N,IAAMvO,EACZiO,GAAUjO,GAGE,OAAZ4N,IAvDK,SAAC/G,EAAD,GAAyD,IAA7C3G,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACpDuG,EAAQuC,UAAY,QACpBvC,EAAQsG,SAAS,EAAG,EAAGtG,EAAQM,OAAO1L,MAAOoL,EAAQM,OAAOzL,QAC5DmL,EAAQuC,UAAYwE,GAEhB1N,IACA2N,IAAW3N,GAGXC,IACA2N,IAAW3N,GAIXC,GAGQ2N,GAFJlH,EAAQM,OAAO1L,OAAS+E,GAAM/E,MAC1B4E,EACWG,GAAM/E,MAAQoL,EAAQM,OAAO1L,MAE7B,EAGJoL,EAAQM,OAAO1L,MAAQ+E,GAAM/E,MAIpCuS,GAFJnH,EAAQM,OAAOzL,QAAU8E,GAAM9E,OAC3B4E,EACWE,GAAM9E,OAASmL,EAAQM,OAAOzL,OAE9B,EAGJmL,EAAQM,OAAOzL,OAAS8E,GAAM9E,OAE7CmL,EAAQ2H,aAAaT,GAAU,EAAG,EAAGC,GAAUH,GAASC,IACxDjH,EAAQsG,UAAUU,GAAUE,IAAWD,GAAUE,GAAUnH,EAAQM,OAAO1L,MAAOoL,EAAQM,OAAOzL,QAChGmL,EAAQ4H,mBAER5H,EAAQ6H,UAAUb,GAASC,IAC3BjH,EAAQsG,UAAUU,IAAUC,GAASjH,EAAQM,OAAO1L,MAAOoL,EAAQM,OAAOzL,QAC1EmL,EAAQ6H,WAAWb,IAAUC,KAiB7BtH,CAAKK,EAASsH,ICrChBQ,GAAY,SAAC9H,EAASM,EAAQyH,EAAOtI,GACvC,IAAMnE,EAAcyM,EAAMzM,YAAcgF,EAAOzL,OACzCmT,EAAUvI,EAAa,IAAO,IAC9BwI,EAAS3H,EAAO1L,MAAQmT,EAAMxM,cAC9B2M,EAAS5H,EAAOzL,OAASkT,EAAMxM,cAErCyE,EAAQuC,UAAY,UACpBvC,EAAQsG,SAAS,EAAGhL,EAAagF,EAAO1L,MAAO0L,EAAOzL,QAEtD,IAAMsT,EA1Ca,SAACnI,EAASM,EAAQhF,GACrC,IAAM6M,EAAOnI,EAAQ0B,qBAAqBpB,EAAO1L,MAAQ,EAAG0G,EAAagF,EAAO1L,MAAQ,EAAG0L,EAAOzL,QAIlG,OAHAsT,EAAKlH,aAAa,EAAG,WACrBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,EAAG,WACdkH,EAqCMC,CAAepI,EAASM,EAAQhF,GAE7C0E,EAAQoF,YAAc+C,EApCR,SAACnI,EAASM,EAAQ0H,EAAlB,GAAuE,IAA3C1M,EAA0C,EAA1CA,YAAa+M,EAA6B,EAA7BA,OAAQJ,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACvElI,EAAQsI,OAAS,6CACjBtI,EAAQqF,UAAY,EACpBrF,EAAQwC,YACR,IAAK,IAAIzB,EAAI,EAAGA,EAAIsH,EAAQtH,IAAK,CAC7B,IAAIwH,EAAoBxH,EAAIsH,GAAT,EAAmB,EACtCrI,EAAQyF,OAAO8C,EAAcN,EAASlH,EAAIkH,EAASD,EAAQ1M,GAE3D,IAAIuG,EAAIoG,EAASlH,EAAI,EAAIT,EAAO1L,MAAQ,EACxCoL,EAAQ0F,OAAO6C,EAAc1G,EAAa,EAAToG,EAAaD,EAAQ1H,EAAOzL,QAEjEmL,EAAQ2F,SAER3F,EAAQqF,UAAY,EACpBrF,EAAQwC,YAER,IADA,IAAM3N,EAA2C,GAAjCqT,EAAS5M,EAAc+M,GAC9BtH,EAAI,EAAGA,EAAIsH,EAAS,EAAGtH,IAC5Bf,EAAQyF,OAAO,EAAGnK,EAAczG,EAASkM,GACzCf,EAAQ0F,OAAOpF,EAAO1L,MAAO0G,EAAczG,EAASkM,GAExDf,EAAQ2F,SAER3F,EAAQsI,OAAS,OAejBE,CAAUxI,EAASM,EAAQ0H,EAAQ,CAAE1M,cAAa+M,OAAQN,EAAMxM,cAAe0M,SAAQC,YCwCrFO,GAAiB,SAACzI,EAASM,EAAQyH,EAAOtI,GAC5C,IAAM0I,EAtFY,SAACnI,EAASM,GAC5B,IAAM6H,EAAOnI,EAAQ0B,qBAAqBpB,EAAO1L,MAAQ,EAAG,EAAG0L,EAAO1L,MAAQ,EAAG0L,EAAOzL,QAOxF,OANAsT,EAAKlH,aAAa,EAAG,SACrBkH,EAAKlH,aAAa,IAAM,WACxBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,GAAK,WAChBkH,EA8EMO,CAAc1I,EAASM,GACpCN,EAAQuC,UAAY4F,EACpBnI,EAAQsG,SAAS,EAAG,EAAGhG,EAAO1L,MAAO0L,EAAOzL,QAC5C,IAAM8T,EA9EQ,SAACrI,EAAQhF,GACvB,IAAMsN,EAAUtI,EAAO1L,MAAQ,EAC/B,MAAO,CACHiN,EAAGvB,EAAO1L,MAAQ,EAAIgU,EAAU,EAChC9G,EAAGxG,GAAegF,EAAOzL,OAAmB,GAAV+T,GAAiBA,EAAU,EAC7DhU,MAAOgU,EACP/T,OAAQ+T,GAwEGC,CAAUvI,EAAQyH,EAAMzM,cAvC3B,SAAC0E,EAAS2I,GACtB3I,EAAQsI,OAAS,YACjBtI,EAAQuC,UA/BW,SAACvC,EAAS2I,GAC7B,IAAMR,EAAOnI,EAAQ0B,qBACjBiH,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAC1B+T,EAAO7G,EACP6G,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAC1B+T,EAAO7G,EAAI6G,EAAO9T,QAOtB,OALAsT,EAAKlH,aAAa,EAAG,WACrBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,GAAK,WACvBkH,EAAKlH,aAAa,EAAG,WACdkH,EAmBaW,CAAe9I,EAAS2I,GAC5C3I,EAAQwC,YACRxC,EAAQyC,IAAIkG,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAAG+T,EAAO7G,EAAI6G,EAAO9T,OAAS,EAAG8T,EAAO/T,MAAQ,EAAG,EAAa,EAAVjC,KAAKC,IACjGoN,EAAQ0C,OACR1C,EAAQsI,OAAS,OAkCjBS,CAAQ/I,EAAS2I,GACjB3I,EAAQuC,UAAY4F,EAhCH,SAACnI,EAAS2I,EAAQlJ,GACnCO,EAAQsI,OAAS,YAKjB,IAJA,IACMN,EAAUvI,EAAa,IAAO,IAG3BsB,EAAI,EAAGA,EAFH,GAEaA,IAAK,CAC3B,IAAIe,EALW,GAKPf,EALO,GAKUiH,EACrBnT,EANW,GAMF,SAACiN,EAAI6G,EAAO9T,OAAW,GACpCmL,EAAQsG,SAASqC,EAAO9G,EAAI,GAAI8G,EAAO7G,EAAI,GAAKA,EAAG6G,EAAO/T,MAAQ,GAAIC,GAE1EmL,EAAQsI,OAAS,OAsBjBU,CAAahJ,EAAS2I,EAAQlJ,GAnBd,SAACO,EAAS2I,GAE1B3I,EAAQiJ,yBAA2B,aACnCjJ,EAAQsI,OAAS,cACjBtI,EAAQuC,UA1Ce,SAACvC,EAAS2I,GAA0B,IAAlBzD,EAAiB,uDAAT,KAC3CiD,EAAOnI,EAAQ0B,qBACjBiH,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAC1B+T,EAAO7G,EACP6G,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAC1B+T,EAAO7G,EAAI6G,EAAO9T,QAOtB,OALAsT,EAAKlH,aAAa,EAAG,UAAYiE,GACjCiD,EAAKlH,aAAa,GAAK,UAAYiE,GACnCiD,EAAKlH,aAAa,GAAK,UAAYiE,GACnCiD,EAAKlH,aAAa,GAAK,UAAYiE,GACnCiD,EAAKlH,aAAa,EAAG,UAAYiE,GAC1BiD,EA8Bae,CAAmBlJ,EAAS2I,EAHlC,MAId3I,EAAQwC,YACRxC,EAAQyC,IAAIkG,EAAO9G,EAAI8G,EAAO/T,MAAQ,EAAG+T,EAAO7G,EAAI6G,EAAO9T,OAAS,EAAG8T,EAAO/T,MAAQ,EAAG,EAAa,EAAVjC,KAAKC,IACjGoN,EAAQ0C,OACR1C,EAAQsI,OAAS,OACjBtI,EAAQiJ,yBAA2B,cAWnCE,CAAYnJ,EAAS2I,IC7FV,OAA0B,yCCErCS,GAAe,KAEfC,GACO,GADPA,GAEQ,IAGRC,GAAc,KASZC,GAAc,SAACvJ,GAGjB,IAFA,IAAIwJ,EAAYxJ,EAAQyJ,aAAa,EAAG,EAAGJ,GAAgBA,IACvDK,EAAOF,EAAUE,KACZ3I,EAAI,EAAGA,EAAI2I,EAAKvT,OAAQ4K,GAAK,EAAG,CAAC,IAAD,EACnB,CAAC2I,EAAK3I,GAAI2I,EAAK3I,EAAI,GAAI2I,EAAK3I,EAAI,IACxC,MAF2B,MAEd,MAFc,MAED,MAFC,OAGjC2I,EAAK3I,EAAI,GAAK,EACd2I,EAAK3I,EAAI,GAAK,EACd2I,EAAK3I,EAAI,GAAK,EACd2I,EAAK3I,EAAI,GAAK,GAGtBf,EAAQ2J,aAAaH,EAAW,EAAG,IAGjCI,GAAY,SAACC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAChB,IAAMpQ,EAAQ,IAAIQ,MAClBR,EAAM+N,IAAMmC,EACZlQ,EAAM4N,OAAS,kBAAMwC,EAAQpQ,QAW/BqQ,GAAc,WAChB,IAAM1J,EAAS2J,SAASC,cAAc,UAChClK,EAAUM,EAAOL,WAAW,MAClCK,EAAO1L,MAAQyU,GACf/I,EAAOzL,OAASwU,GAChB,IAAMpW,EA1CmB,SAACkX,GAC1B,IAAMhC,EAAOgC,EAAQzI,qBAAqB2H,GAAiB,EAAG,EAAGA,GAAiB,EAAGA,IAGrF,OAFAlB,EAAKlH,aAAa,EAAG,OACrBkH,EAAKlH,aAAa,EAAG,QACdkH,EAsCUiC,CAAqBpK,GACtCA,EAAQuC,UAAYtP,EAGpB,IADA,IAAIoX,EAAY,GACPtJ,EAAI,EAAGA,EAAIuI,GAAY1U,MAAQyU,GAAgBtI,IACpDf,EAAQsG,SAAS,EAAG,EAAG+C,GAAgBA,IACvCrJ,EAAQsK,UACJhB,GACAvI,EAAIsI,GACJ,EACAA,GACAA,GACA,EACA,EACAA,GACAA,IAEJE,GAAYvJ,GACZqK,EAAUnG,KAAK5D,EAAOiK,cA9BN,SAACC,GACrB,IAAIC,EAAgBD,EAAK7T,IAAIiT,IAC7BE,QAAQY,IAAID,GAAeE,MAAK,SAACC,GAC7BxB,GAAY,YAAOwB,MA6BvBC,CAAgBR,ICvEhBS,GAAc,KACdC,GAAW,EAETC,GAAmB,SAAC3C,GACtB,IAAK,IAAItH,EAAI,EAAGA,EAAIsH,EAAQtH,IACxB+J,GAAY5G,KAAKvR,KAAKyD,MAAMzD,KAAK0D,UAAY+S,GAAajT,OAAS,IAAM,IA+C7E8U,GAAY,EAOVC,GAAa,SAAClL,EAASM,EAAQyH,EAAOtI,GACxC,GAAmB,MAAf6J,GAEA,ODaJA,GAAc,IAAInP,OACNuN,IAAMyD,QAClB7B,GAAY/B,OAASyC,ICbrB,GAAqB,OAAjBZ,GAAJ,CAvDiB,IAAC7N,IA4DLwM,EAAMxM,cAAgB,EA3D/BwP,KAAaxP,IAEG,OAAhBuP,IACAA,GAAc,GACdE,GAAiBzP,IAEbwP,GAAWxP,EACXyP,GAAiBzP,EAAgBwP,IAGjCD,GAAcA,GAAYM,MAAM,EAAG7P,GAI3CwP,GAAWxP,GA8CX,IAAMhC,EAAQ+G,EAAO1L,MAAQmT,EAAMxM,cAC7ByM,EAAUvI,EAAa,IAAO,IAC9BnE,EAAcyM,EAAMzM,YAAcgF,EAAOzL,QAnB9B,SAACmT,GAClB,IAAMzB,EAAS5T,KAAK0Y,IAAIJ,GAAYjD,GAAU,GAE9C,OADAiD,GAAYjD,EACLzB,GAkBH+E,CAAatD,IACb8C,GAAYS,QAAQT,GAAYU,OAhD3B,SAACxL,EAASzG,EAAO+B,EAAa0M,GAGvC,IAFA,IAAIpT,EAAQ2E,EACR1E,EAAUwU,GAAkBA,GAAkBzU,EACzCmM,EAAI,EAAGA,EAAI+J,GAAY3U,OAAQ4K,IAAK,CACzC,IAAI0K,EAAaX,GAAY/J,GAG7B,IAAoB,IAAhB0K,EAAJ,CAGA,IAAIC,EAAQtC,GAAaqC,GACzBzL,EAAQsK,UACJoB,EACA,EACA,EACArC,GACAA,IACCtI,EAAI,GAAKxH,EAAQA,EAAQyO,EAC1B1M,EAAczG,EACdD,EAAQ,EACRC,KA+BR8K,CAAKK,EAASzG,EAAO+B,EAAa0M,KC5EhC2D,GAAc,SAAC3L,EAAS+H,EAAOtI,GACjC,IAAImM,EAAO,CAAC5L,EAASA,EAAQM,OAAQyH,EAAOtI,GAC5CgJ,GAAc,WAAd,EAAkBmD,GAClBV,GAAU,WAAV,EAAcU,GACd5L,EAAQ6L,YAAc,GACtB/D,GAAS,WAAT,EAAa8D,GACb5L,EAAQ6L,YAAc,GCsBpBC,GAAkB,SAAC9L,EAAS+L,EAAStM,GACvC,OAAQsM,EAAQ1P,OAAOH,MACnB,IAAK,WACD,OChCW,SAAC8D,EAASmB,EAAe1B,GAC5C,OAAOyB,GAAmBlB,EAASmB,EAAe1B,EAAY,YD+B/C2I,CAAepI,EAAS+L,EAAQ9Y,SAAUwM,GACrD,IAAK,WACD,OEnCW,SAACO,EAASmB,EAAe1B,GAC5C,OAAOyB,GAAmBlB,EAASmB,EAAe1B,EAAY,YFkC/CuM,CAAehM,EAAS+L,EAAQ9Y,SAAUwM,GACrD,IAAK,SACD,OGzBS,SAACO,EAASmB,EAAe1B,GAC1C,IAAIa,EAASN,EAAQM,OAEfrN,EAfgB,SAAC+M,EAASW,GAChC,IAAIL,EAASN,EAAQM,OACrB,OAAON,EAAQiM,qBACX3L,EAAO1L,MAAQ,EACf0L,EAAOzL,OAAS,EAChB,EACAyL,EAAO1L,MAAQ,EACf0L,EAAOzL,OAAS,EAChB8L,GAOauL,CAAkBlM,EADpBK,GAAUC,EAAQa,EAActO,OAAQ,WAGvD,OAAOiO,GAAc7N,EAAU4N,GAASpB,EAAY0B,EAAc1O,OAAQ0O,EAActO,QHoBzEsZ,CAAanM,EAAS+L,EAAQ9Y,SAAUwM,GACnD,QACI,OAAO,OAKb2M,GAAc,SAAClQ,GACjB,OAAQA,GACJ,IAAK,WACL,IAAK,WACL,IAAK,SACD,MAAO,YAGX,IAAK,QACD,MAAO,UAGX,IAAK,OACL,IAAK,YACD,MAAO,SAGX,QACI,MAAO,YAKbmQ,GAAa,SAACrM,EAAS+L,EAAStM,GAAqC,IAAzBwG,EAAwB,wDAChE3F,EAASN,EAAQM,OACjBhI,EAAO8T,GAAYL,EAAQ1P,OAAOH,MAKxC,OAJa,cAAT5D,GACA0H,EAAQsG,SAAS,EAAG,EAAGhG,EAAO1L,MAAO0L,EAAOzL,QAGxCkX,EAAQ1P,OAAOH,MACnB,IAAK,OACDmK,GAAWrG,EAAS+L,EAAQnR,KAAMqL,GAClC,MAEJ,IAAK,QACDoB,GAAYrH,EAAS+L,EAAQpS,OAC7B,MAEJ,IAAK,YACDgS,GAAY3L,EAAS+L,EAAQtQ,MAAOgE,KAS5C6M,GAAW,GACXC,GAAiB,CAAE3X,MAAO,EAAGC,OAAQ,GAmC1B2X,GAlCM,SAACxM,EAASP,EAAYsM,GACvC,GAAIO,KAAaP,EAAQ1P,OAAOH,KAAM,CAClCoQ,GAAWP,EAAQ1P,OAAOH,KAE1B,IAAIuQ,EAAOzM,EAAQM,OAAO1L,MAC1BoL,EAAQM,OAAO1L,MAAQ,EACvBoL,EAAQM,OAAO1L,MAAQ6X,EAE3B,IAAIxG,EAAcjG,EAAQM,OAAO1L,QAAU2X,GAAe3X,OAASoL,EAAQM,OAAOzL,SAAW0X,GAAe1X,OACxGoR,IACAsG,GAAe3X,MAAQoL,EAAQM,OAAO1L,MACtC2X,GAAe1X,OAASmL,EAAQM,OAAOzL,QAtF3B,SAACmL,GACjB,IAAMM,EAASN,EAAQM,OACvBN,EAAQuC,UAAY,QACpBvC,EAAQsG,SAAS,EAAG,EAAGhG,EAAO1L,MAAO0L,EAAOzL,QAC5CmL,EAAQ0M,KAAO,eACf1M,EAAQ2M,UAAY,SACpB3M,EAAQuC,UAAY,QACpBvC,EAAQ4M,SAAS,WAAYtM,EAAO1L,MAAQ,EAAG0L,EAAOzL,OAAS,GAkF/DgY,CAAY7M,GAEZ,IAAM1H,EAAO8T,GAAYL,EAAQ1P,OAAOH,MACxC,GAAa,cAAT5D,EAAsB,CACtB,IAAIiK,EAAYuJ,GAAgB9L,EAAS+L,EAAStM,GAChC,OAAd8C,IACAvC,EAAQuC,UAAYA,EACpB8J,GAAWrM,EAAS+L,QAER,WAATzT,EACP+T,GAAWrM,EAAS+L,EAAStM,EAAYwG,GACzB,YAAT3N,GACP+T,GAAWrM,EAAS+L,GAGpBA,EAAQ1P,OAAOF,OAvHL,SAAC6D,EAASP,GACxB,IAAMa,EAASN,EAAQM,OAEvBN,EAAQuC,UAAY,YACpBvC,EAAQwC,YACRxC,EAAQyC,IACJnC,EAAO1L,MAJE,GAIe,GACxB0L,EAAOzL,OALE,GAKgB,GALhB,GAMH,SAAGlC,KAAK4O,IAAiB,IAAb9B,GAAsB,GACxC,EACA,EAAI9M,KAAKC,IAEboN,EAAQ0C,OA4GJoK,CAAU9M,EAASP,IIlHZsN,GAPA,WAAO,IAAD,EACO/N,KADP,mBACVpK,EADU,KACHC,EADG,KAEX+K,EAAYF,GAAU8M,IAE5B,OAAO,wBAAQnU,IAAKuH,EAAWhL,MAAOA,EAAOC,OAAQA,KCF1CmY,GAJC,WACZ,OAAO,cAAC,GAAD,KCqBIC,GAnBO,WAAO,IAAD,EACI5Y,oBAAS,GADb,mBACjBsD,EADiB,KACRuV,EADQ,KAExB,OACI,gCACI,cAACrV,EAAA,EAAD,CACIlD,GAAI,CACAkJ,SAAU,WACVsP,OAAQ,EACRpP,KAAM,GAEVpG,QAASA,EACTtC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB4X,EAAS5X,EAAOqC,YAE9C,cAAC,GAAD,CAAyB2G,OAAQ3G,IACjC,cAAC,GAAD,QCZNyV,GAAQC,YAAY,CACtBC,QAAS,CACLpR,KAAM,QAEVgB,QAAS,IAGPqQ,GAAM,WACR,OACI,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,eAACC,EAAA,EAAD,CAAeL,MAAOA,GAAtB,UACI,cAACM,EAAA,EAAD,IACA,cAAC,GAAD,YAOpBC,IAASzN,OAAO,cAAC,GAAD,IAAS+J,SAAS2D,eAAe,W","file":"static/js/main.0905b6a8.chunk.js","sourcesContent":["const setProperty = (setter, key) => {\r\n    return (value) => {\r\n        setter((state) => ({ ...state, [key]: value }));\r\n    };\r\n};\r\n\r\nconst localStorageEffect =\r\n    (key) =>\r\n    ({ setSelf, onSet }) => {\r\n        const savedValue = localStorage.getItem(key);\r\n        if (savedValue !== null) {\r\n            setSelf(JSON.parse(savedValue));\r\n        }\r\n\r\n        onSet((newValue, _, isReset) => {\r\n            isReset ? localStorage.removeItem(key) : localStorage.setItem(key, JSON.stringify(newValue));\r\n        });\r\n    };\r\n\r\nexport { setProperty, localStorageEffect };\r\n","import { atom, useRecoilState } from \"recoil\";\r\nimport { setProperty, localStorageEffect } from \"./helper\";\r\n\r\nconst gradientAtom = atom({\r\n    key: \"Gradient\",\r\n    default: {\r\n        speed: 100,\r\n        rotation: (Math.PI * 5) / 8, //radians\r\n        colors: [\r\n            \"#FF0000\", // Red\r\n            \"#FFA500\", // Orange\r\n            \"#FFFF00\", // Yellow\r\n            \"#008000\", // Green\r\n            \"#0000FF\", // Blue\r\n            \"#4B0082\", // Indigo\r\n            \"#EE82EE\", // Violet\r\n        ],\r\n    },\r\n    effects: [localStorageEffect(\"Gradient\")],\r\n});\r\n\r\nconst useGradientAtom = () => {\r\n    const [gradient, setGradient] = useRecoilState(gradientAtom);\r\n\r\n    const setSpeed = setProperty(setGradient, \"speed\");\r\n    const setRotation = setProperty(setGradient, \"rotation\");\r\n    const setColors = setProperty(setGradient, \"colors\");\r\n    const addColor = (color) => setGradient((state) => ({ ...state, colors: [...state.colors, color] }));\r\n\r\n    const setColorByIndex = (index, color) => {\r\n        setGradient((state) => {\r\n            const colors = [...state.colors];\r\n            colors[index] = color;\r\n            return { ...state, colors };\r\n        });\r\n    };\r\n\r\n    const deleteColorByIndex = (index) => {\r\n        setGradient((state) => {\r\n            const colors = [...state.colors];\r\n            colors.splice(index, 1);\r\n            return { ...state, colors };\r\n        });\r\n    };\r\n\r\n    return {\r\n        gradient,\r\n        setSpeed,\r\n        setRotation,\r\n        setColors,\r\n        addColor,\r\n        setColorByIndex,\r\n        deleteColorByIndex,\r\n    };\r\n};\r\n\r\nexport default useGradientAtom;\r\n","import React, { useState } from \"react\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport { IconButton, TextField } from \"@mui/material\";\r\nimport { ListItem, ListItemText } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\n\r\nconst isColor = (strColor) => {\r\n    const s = new Option().style;\r\n    s.color = strColor;\r\n    return s.color !== \"\";\r\n};\r\n\r\nconst changeColor = (setColorByIndex, index, color, setError) => {\r\n    if (!isColor(color)) {\r\n        setError(true);\r\n        return;\r\n    }\r\n    setError(false);\r\n    setColorByIndex(index, color);\r\n};\r\n\r\nconst ColorItem = ({ color, index, blockDelete }) => {\r\n    const { deleteColorByIndex, setColorByIndex } = useGradientAtom();\r\n    const [error, setError] = useState(false);\r\n\r\n    return (\r\n        <ListItem disablePadding>\r\n            <Box\r\n                ml={1}\r\n                mr={1}\r\n                sx={{\r\n                    width: 70,\r\n                    height: 25,\r\n                    backgroundColor: color,\r\n                    border: 2,\r\n                    borderColor: \"#aaaaaa\",\r\n                    borderRadius: 2,\r\n                    \"&:hover\": {\r\n                        backgroundColor: color,\r\n                        opacity: [0.8, 0.8, 0.8],\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <ListItemText>\r\n                <TextField\r\n                    onChange={({ target }) => changeColor(setColorByIndex, index, target.value, setError)}\r\n                    id=\"standard-basic\"\r\n                    variant=\"standard\"\r\n                    color={error ? \"error\" : \"primary\"}\r\n                    defaultValue={color}\r\n                />\r\n            </ListItemText>\r\n            <IconButton disabled={blockDelete} onClick={() => deleteColorByIndex(index)}>\r\n                <DeleteIcon />\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default ColorItem;\r\n","import React from \"react\";\r\nimport { TransitionGroup } from \"react-transition-group\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport { Grid, IconButton } from \"@mui/material\";\r\nimport { List, Divider } from \"@mui/material\";\r\nimport { Collapse } from \"@mui/material\";\r\n\r\nimport ColorItem from \"./colorItem\";\r\n\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\n\r\nconst RandomColor = () => {\r\n    return (\r\n        \"#\" +\r\n        Math.floor(Math.random() * 16777215)\r\n            .toString(16)\r\n            .toUpperCase()\r\n    );\r\n};\r\n\r\nconst ColorsList = () => {\r\n    const { gradient, addColor } = useGradientAtom();\r\n\r\n    return (\r\n        <Grid item mt={-1}>\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n                <Grid item>Colors</Grid>\r\n                <Grid item>\r\n                    <IconButton disabled={gradient.colors.length >= 9} onClick={() => addColor(RandomColor())}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n            <List sx={{ width: \"100%\", bgcolor: \"#00000050\", borderRadius: 3 }}>\r\n                <TransitionGroup>\r\n                    {gradient.colors.map((color, index) => (\r\n                        <Collapse key={color}>\r\n                            {index !== 0 && <Divider />}\r\n                            <ColorItem blockDelete={gradient.colors.length < 2} color={color} index={index}></ColorItem>\r\n                        </Collapse>\r\n                    ))}\r\n                </TransitionGroup>\r\n            </List>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ColorsList;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nconst SettingsSlider = ({ defaultValue, label, onChange, min, max, step, color }) => {\r\n    const [value, setValue] = useState(defaultValue);\r\n    return (\r\n        <>\r\n            <Grid item>{label}</Grid>\r\n            <Grid item>\r\n                <Slider\r\n                    sx={{ color }}\r\n                    onChange={(e, value) => {\r\n                        setValue(value);\r\n                        onChange(value);\r\n                    }}\r\n                    defaultValue={value}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    value={value}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SettingsSlider;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\n\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\n\r\nconst getRotationLabel = (angle) => {\r\n    return `${angle.toFixed(2)} rad / ${((angle * 180) / Math.PI).toFixed(2)} degrees`;\r\n};\r\n\r\nconst Gradient = () => {\r\n    const { gradient, setSpeed, setRotation } = useGradientAtom();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={(value) => setSpeed(value)}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={gradient.rotation}\r\n                label={\"Rotation - \" + getRotationLabel(gradient.rotation)}\r\n                min={0}\r\n                max={Math.PI * 2}\r\n                step={0.01}\r\n                onChange={(value) => setRotation(value)}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Gradient;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Checkbox, Grid, Typography } from \"@mui/material\";\r\n\r\nconst SettingsCheckbox = ({ defaultValue, label, onChange }) => {\r\n    const [checked, setChecked] = useState(defaultValue);\r\n    return (\r\n        <Grid mt={-1} ml={-1.5} item>\r\n            <Checkbox\r\n                checked={checked}\r\n                onChange={(e, value) => {\r\n                    setChecked(value);\r\n                    onChange(value);\r\n                }}\r\n            />\r\n            <Typography mt={1} sx={{ display: \"inline\" }}>\r\n                {label}\r\n            </Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsCheckbox;\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst ImageUpload = ({ onChange }) => {\r\n    const [imgURL, setImgURL] = useState(null);\r\n\r\n    const uploadInputRef = useRef(null);\r\n\r\n    const openDialog = () => {\r\n        uploadInputRef.current && uploadInputRef.current.click();\r\n    };\r\n\r\n    const fileUploaded = ({ target }) => {\r\n        let newImage = target.files[0];\r\n        let newUrl = URL.createObjectURL(newImage);\r\n        if (imgURL !== null) {\r\n            URL.revokeObjectURL(imgURL);\r\n        }\r\n        setImgURL(newUrl);\r\n        onChange(newUrl);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input ref={uploadInputRef} type=\"file\" accept=\"image/*\" onChange={fileUploaded} hidden />\r\n            <Button onClick={openDialog} variant=\"outlined\">\r\n                Upload image\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;\r\n","export default __webpack_public_path__ + \"static/media/city.ea63c51b.jpg\";","import { atom, useRecoilState } from \"recoil\";\r\nimport { setProperty, localStorageEffect } from \"./helper\";\r\n\r\nimport City from \"../content/city.jpg\";\r\n\r\nconst imageAtom = atom({\r\n    key: \"Image\",\r\n    default: {\r\n        imageUrl: City,\r\n        speedX: -3,\r\n        speedY: 0,\r\n        scale: true,\r\n        clampX: false,\r\n        clampY: false,\r\n    },\r\n    effects: [localStorageEffect(\"Image\")],\r\n});\r\n\r\nconst useImageAtom = () => {\r\n    const [image, setImage] = useRecoilState(imageAtom);\r\n\r\n    const setImageUrl = setProperty(setImage, \"imageUrl\");\r\n    const setSpeedX = setProperty(setImage, \"speedX\");\r\n    const setSpeedY = setProperty(setImage, \"speedY\");\r\n    const setScale = setProperty(setImage, \"scale\");\r\n    const setClampX = setProperty(setImage, \"clampX\");\r\n    const setClampY = setProperty(setImage, \"clampY\");\r\n\r\n    return {\r\n        image,\r\n        setImageUrl,\r\n        setSpeedX,\r\n        setSpeedY,\r\n        setScale,\r\n        setClampX,\r\n        setClampY,\r\n    };\r\n};\r\n\r\nexport default useImageAtom;\r\n","import SettingsSlider from \"../components/settingsSlider\";\r\nimport SettingsCheckbox from \"../components/settingsCheckbox\";\r\n\r\nimport ImageUpload from \"../image/imageUpload\";\r\n\r\nimport useImageAtom from \"../../../atoms/image\";\r\n\r\nconst Image = () => {\r\n    const { image, setImageUrl, setSpeedX, setSpeedY, setScale, setClampX, setClampY } = useImageAtom();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={image.speedX}\r\n                label={\"SpeedX \" + image.speedX}\r\n                min={-10}\r\n                max={10}\r\n                step={1}\r\n                onChange={(value) => setSpeedX(value)}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={image.speedY}\r\n                label={\"SpeedY \" + image.speedY}\r\n                min={-10}\r\n                max={10}\r\n                step={1}\r\n                onChange={(value) => setSpeedY(value)}\r\n            />\r\n            <SettingsCheckbox defaultValue={image.scale} label={\"Scale to fit\"} onChange={(value) => setScale(value)} />\r\n            <SettingsCheckbox defaultValue={image.clampX} label={\"Clamp X\"} onChange={(value) => setClampX(value)} />\r\n            <SettingsCheckbox defaultValue={image.clampY} label={\"Clamp Y\"} onChange={(value) => setClampY(value)} />\r\n            <ImageUpload onChange={(newUrl) => setImageUrl(newUrl)} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Image;\r\n","import SettingsSlider from \"../components/settingsSlider\";\r\nimport ColorsList from \"../gradient/colorsAdder\";\r\n\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\n\r\nconst Radial = () => {\r\n    const { gradient, setSpeed } = useGradientAtom();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={setSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Radial;\r\n","import { atom, useRecoilState } from \"recoil\";\r\nimport { setProperty, localStorageEffect } from \"./helper\";\r\n\r\nconst dotsAtom = atom({\r\n    key: \"Dots\",\r\n    default: {\r\n        curve: 0,\r\n        speed: 50,\r\n        count: 100,\r\n        showDots: true,\r\n        showGrid: false,\r\n        maxDistance: 120,\r\n    },\r\n    effects: [localStorageEffect(\"Dots\")],\r\n});\r\n\r\nconst useDotsAtom = () => {\r\n    const [dots, setDots] = useRecoilState(dotsAtom);\r\n\r\n    const setCurve = setProperty(setDots, \"curve\");\r\n    const setSpeed = setProperty(setDots, \"speed\");\r\n    const setCount = setProperty(setDots, \"count\");\r\n    const setShowDots = setProperty(setDots, \"showDots\");\r\n    const setShowGrid = setProperty(setDots, \"showGrid\");\r\n    const setMaxDistance = setProperty(setDots, \"maxDistance\");\r\n\r\n    return {\r\n        dots,\r\n        setCurve,\r\n        setSpeed,\r\n        setCount,\r\n        setShowDots,\r\n        setShowGrid,\r\n        setMaxDistance,\r\n    };\r\n};\r\n\r\nexport default useDotsAtom;\r\n","import SettingsSlider from \"../components/settingsSlider\";\r\nimport SettingsCheckbox from \"../components/settingsCheckbox\";\r\n\r\nimport useDotsAtom from \"../../../atoms/dots\";\r\n\r\nconst Dots = () => {\r\n    const { dots, setCurve, setSpeed, setCount, setShowDots, setShowGrid, setMaxDistance } = useDotsAtom();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={dots.speed}\r\n                label={\"Speed - \" + dots.speed + \" pixels/s\"}\r\n                min={1}\r\n                max={50}\r\n                step={1}\r\n                onChange={(value) => setSpeed(value)}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.count}\r\n                label={\"Count - \" + dots.count}\r\n                min={0}\r\n                max={250}\r\n                step={1}\r\n                onChange={(value) => setCount(value)}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.maxDistance}\r\n                label={\"Max distance - \" + dots.maxDistance + \" pixels\"}\r\n                min={100}\r\n                max={200}\r\n                step={1}\r\n                onChange={(value) => setMaxDistance(value)}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.curve}\r\n                label={\"Curvature\"}\r\n                min={0}\r\n                max={300}\r\n                step={1}\r\n                onChange={(value) => setCurve(value)}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.showDots}\r\n                label={\"Show Dots\"}\r\n                onChange={(value) => setShowDots(value)}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.showGrid}\r\n                label={\"Show Grid\"}\r\n                onChange={(value) => setShowGrid(value)}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dots;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\n\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\n\r\nconst Blinking = () => {\r\n    const { gradient, setSpeed } = useGradientAtom();\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={setSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Blinking;\r\n","import { atom, useRecoilState } from \"recoil\";\r\nimport { setProperty, localStorageEffect } from \"./helper\";\r\n\r\nconst synthAtom = atom({\r\n    key: \"Synth\",\r\n    default: {\r\n        floorHeight: 3 / 4, // 0..1\r\n        numberOfLines: 30,\r\n    },\r\n    effects: [localStorageEffect(\"Synth\")],\r\n});\r\n\r\nconst useSynthAtom = () => {\r\n    const [synth, setSynth] = useRecoilState(synthAtom);\r\n\r\n    const setFloorHeight = setProperty(setSynth, \"floorHeight\");\r\n    const setNumberOfLines = setProperty(setSynth, \"numberOfLines\");\r\n\r\n    return {\r\n        synth,\r\n        setFloorHeight,\r\n        setNumberOfLines,\r\n    };\r\n};\r\n\r\nexport default useSynthAtom;\r\n","import SettingsSlider from \"../components/settingsSlider\";\r\nimport useSynthAtom from \"../../../atoms/synth\";\r\n\r\nconst Synthwave = () => {\r\n    const { synth, setFloorHeight, setNumberOfLines } = useSynthAtom();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={synth.floorHeight * 100}\r\n                label={\"Floor height: \" + (synth.floorHeight * 100).toFixed(0)}\r\n                min={30}\r\n                max={85}\r\n                step={1}\r\n                onChange={(newValue) => setFloorHeight(newValue / 100)}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={synth.numberOfLines}\r\n                label={\"Number of lines: \" + synth.numberOfLines}\r\n                min={20}\r\n                max={60}\r\n                step={1}\r\n                onChange={(newValue) => setNumberOfLines(newValue)}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Synthwave;\r\n","import Gradient from \"./Gradient\";\r\nimport Image from \"./Image\";\r\nimport Radial from \"./Radial\";\r\nimport Dots from \"./Dots\";\r\nimport Blinking from \"./Blinking\";\r\nimport Synthwave from \"./Synthwave\";\r\n\r\nconst Modes = [\r\n    {\r\n        name: \"Dots\",\r\n        component: <Dots />,\r\n    },\r\n    {\r\n        name: \"Blinking\",\r\n        component: <Blinking />,\r\n    },\r\n    {\r\n        name: \"Gradient\",\r\n        component: <Gradient />,\r\n    },\r\n    {\r\n        name: \"Image\",\r\n        component: <Image />,\r\n    },\r\n    {\r\n        name: \"Radial\",\r\n        component: <Radial />,\r\n    },\r\n    {\r\n        name: \"Synthwave\",\r\n        component: <Synthwave />,\r\n    },\r\n];\r\n\r\nexport default Modes;\r\n","import { atom, useRecoilState } from \"recoil\";\r\nimport { setProperty, localStorageEffect } from \"./helper\";\r\n\r\nconst configAtom = atom({\r\n    key: \"Config\",\r\n    default: {\r\n        mode: \"Synthwave\",\r\n        debug: false,\r\n    },\r\n    effects: [localStorageEffect(\"Config\")],\r\n});\r\n\r\nconst useConfigAtom = () => {\r\n    const [config, setConfig] = useRecoilState(configAtom);\r\n\r\n    const setMode = setProperty(setConfig, \"mode\");\r\n    const setDebug = setProperty(setConfig, \"debug\");\r\n\r\n    return {\r\n        config,\r\n        setMode,\r\n        setDebug,\r\n    };\r\n};\r\n\r\nexport default useConfigAtom;\r\n","import React from \"react\";\r\n\r\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\r\n\r\nimport Modes from \"./modes/modesMenu\";\r\n\r\nimport useConfigAtom from \"../../atoms/config\";\r\n\r\nconst Mode = () => {\r\n    const { config, setMode } = useConfigAtom();\r\n    const changeMode = ({ target }) => setMode(target.value);\r\n\r\n    return (\r\n        <>\r\n            <Grid item mb={1}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Display mode</InputLabel>\r\n                    <Select value={config.mode} label=\"Display mode\" onChange={changeMode}>\r\n                        {Modes.map((mode) => (\r\n                            <MenuItem key={mode.name} value={mode.name}>\r\n                                {mode.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            {Modes.find((mode) => mode.name === config.mode).component}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mode;\r\n","import React from \"react\";\r\n\r\nimport { Grid, IconButton, Typography } from \"@mui/material\";\r\nimport ReplayIcon from \"@mui/icons-material/Replay\";\r\n\r\nimport Mode from \"./modeSelector\";\r\n\r\nconst SettingsContainer = () => {\r\n    const reloadSettings = () => {\r\n        localStorage.clear();\r\n        window.location.reload();\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ padding: 2 }}>\r\n            <Grid container item direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                <Typography gutterBottom variant=\"h5\" mb={0} mr={1}>\r\n                    Settings\r\n                </Typography>\r\n                <IconButton pb={5} onClick={reloadSettings}>\r\n                    <ReplayIcon />\r\n                </IconButton>\r\n            </Grid>\r\n\r\n            <Grid container item direction=\"column\">\r\n                <Mode />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from \"react\";\r\nimport { Box, Slide } from \"@mui/material\";\r\n\r\nimport SettingsContainer from \"./SettingsContainer\";\r\n\r\nconst SettingsOverlay = () => {\r\n    return (\r\n        <Box\r\n            sx={{\r\n                position: \"absolute\",\r\n                top: 7,\r\n                left: 7,\r\n                width: \"100%\",\r\n                maxWidth: 350,\r\n                backgroundColor: \"#101020a0\",\r\n                borderRadius: 3,\r\n            }}\r\n        >\r\n            <SettingsContainer />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SettingsRef = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div ref={ref} {...props}>\r\n            <SettingsOverlay />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AnimatedSettingsOverlay = ({ active }) => {\r\n    return (\r\n        <Slide\r\n            timeout={{ enter: 3e2, exit: 1e3 }}\r\n            easing={{ enter: \"cubic-bezier(0, 0.5, 1, 1)\" }}\r\n            direction=\"right\"\r\n            in={active}\r\n            appear={false}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <SettingsRef />\r\n        </Slide>\r\n    );\r\n};\r\n\r\nexport { AnimatedSettingsOverlay };\r\nexport default SettingsOverlay;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState([window.innerWidth, window.innerHeight]);\r\n    useEffect(() => {\r\n        const handleResize = () => setWindowSize([window.innerWidth, window.innerHeight]);\r\n\r\n        window.addEventListener(\"resize\", () => handleResize());\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nimport useConfigAtom from \"../../../atoms/config\";\r\nimport useDotsAtom from \"../../../atoms/dots\";\r\nimport useGradientAtom from \"../../../atoms/gradient\";\r\nimport useImageAtom from \"../../../atoms/image\";\r\nimport useSynthAtom from \"../../../atoms/synth\";\r\n\r\nlet frameCount = 0;\r\nconst useCanvas = (draw) => {\r\n    const canvasRef = useRef(null);\r\n\r\n    const { config } = useConfigAtom();\r\n    const { dots } = useDotsAtom();\r\n    const { gradient } = useGradientAtom();\r\n    const { image } = useImageAtom();\r\n    const { synth } = useSynthAtom();\r\n\r\n    useEffect(() => {\r\n        console.log(Math.random());\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n\r\n        const render = () => {\r\n            frameCount++;\r\n            draw(context, frameCount, { config, dots, gradient, image, synth });\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, config, dots, gradient, image, synth]);\r\n\r\n    return canvasRef;\r\n};\r\n\r\nexport default useCanvas;\r\n","const getRealRadius = (canvas) => {\r\n    return Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2;\r\n};\r\n\r\nconst getColorStopWidth = (radius, colors) => {\r\n    return (radius * 2) / colors.length;\r\n};\r\n\r\nconst getRadius = (canvas, colors, mode) => {\r\n    //circumscribed circle around canvas rectangle\r\n    let realRadius = getRealRadius(canvas);\r\n\r\n    //how much space one color takes up\r\n    let colorStopWidth = getColorStopWidth(realRadius, colors);\r\n\r\n    let radius = 0;\r\n    if (mode === \"Blinking\") {\r\n        // set circumscribed circle's radius to a color stop\r\n        radius = realRadius * colorStopWidth;\r\n    } else if (mode === \"Gradient\" || mode === \"Radial\") {\r\n        //increase circumscribed circle's radius by a color stop\r\n        radius = realRadius + colorStopWidth;\r\n    }\r\n\r\n    return radius;\r\n};\r\n\r\nconst getLinearGradient = (context, rotation, radius) => {\r\n    let canvas = context.canvas;\r\n    //calculate location of points on a circle based on rotation\r\n    let x1 = Math.cos(-rotation + Math.PI) * radius + canvas.width / 2;\r\n    let y1 = Math.sin(-rotation + Math.PI) * radius + canvas.height / 2;\r\n    let x2 = Math.cos(-rotation) * radius + canvas.width / 2;\r\n    let y2 = Math.sin(-rotation) * radius + canvas.height / 2;\r\n\r\n    return context.createLinearGradient(x1, y1, x2, y2);\r\n};\r\nconst getSpeed = (frameCount, speed) => (frameCount / speed) * 1.5;\r\n\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    return gradient;\r\n};\r\n\r\nconst createGradientType = (context, storeGradient, frameCount, mode) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, mode);\r\n    const gradient = getLinearGradient(context, storeGradient.rotation, radius);\r\n    let speed = getSpeed(frameCount, storeGradient.speed);\r\n\r\n    return addColorStops(gradient, speed, storeGradient.colors);\r\n};\r\n\r\nexport { createGradientType, addColorStops, getSpeed, getRadius };\r\n\r\n/* ------------------------------ */\r\n\r\n/* BROKEN\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    let minOffset = 1;\r\n    let baseColorIndex = null;\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n\r\n        if (colorOffset < minOffset) {\r\n            minOffset = colorOffset;\r\n            baseColorIndex = i;\r\n        }\r\n\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    if (baseColorIndex + speed > 0.001) {\r\n        let baseIndex = (baseColorIndex - 1 + colors.length) % colors.length;\r\n        gradient.addColorStop(0, colors[baseIndex]);\r\n    }\r\n    return gradient;\r\n};\r\n*/\r\n\r\n/* ------------------------------ */\r\n","class Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector2) {\r\n        this.x += vector2.x;\r\n        this.y += vector2.y;\r\n    }\r\n\r\n    limit(canvas) {\r\n        this.x = (this.x + canvas.width) % canvas.width;\r\n        this.y = (this.y + canvas.height) % canvas.height;\r\n    }\r\n}\r\n\r\nexport default Vector2;\r\n","import Vector2 from \"./Vector2\";\r\n\r\nclass Dot {\r\n    constructor(x, y, color) {\r\n        this.pos = new Vector2(x, y);\r\n        this.vel = new Vector2(0, 0);\r\n\r\n        this.angle = Math.random() * Math.PI * 2;\r\n\r\n        this.setVelocity(50);\r\n        this.color = color || \"#000000\";\r\n    }\r\n\r\n    // speed - pixels per second\r\n    setVelocity(speed) {\r\n        speed /= 1000 / 60;\r\n        this.vel.x = speed * Math.cos(this.angle);\r\n        this.vel.y = speed * Math.sin(this.angle);\r\n    }\r\n\r\n    getBezier(curve) {\r\n        let x = this.pos.x + curve * Math.cos(this.angle);\r\n        let y = this.pos.y + curve * Math.sin(this.angle);\r\n        return [x, y];\r\n    }\r\n\r\n    update(canvas) {\r\n        this.pos.add(this.vel);\r\n        this.pos.limit(canvas);\r\n    }\r\n\r\n    render(context) {\r\n        context.fillStyle = this.color;\r\n\r\n        context.beginPath();\r\n        context.arc(this.pos.x, this.pos.y, 4, 0, 2 * Math.PI);\r\n        context.fill();\r\n    }\r\n}\r\n\r\nfunction hsvToRgb(h, s, v) {\r\n    let r, g, b;\r\n\r\n    let i = Math.floor(h * 6);\r\n    let f = h * 6 - i;\r\n    let p = v * (1 - s);\r\n    let q = v * (1 - f * s);\r\n    let t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        default:\r\n        case 0: {\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 1: {\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 2: {\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        }\r\n        case 3: {\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 4: {\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 5: {\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let get = (num) => {\r\n        let res = Math.floor(num).toString(16);\r\n        if (res.length < 2) res = \"0\" + res;\r\n        return res;\r\n    };\r\n\r\n    return \"#\" + get(r * 255) + get(g * 255) + get(b * 255);\r\n}\r\n\r\nconst createDot = (canv) => {\r\n    return new Dot(canv.width * Math.random(), canv.height * Math.random(), hsvToRgb(Math.random(), 1, 1));\r\n};\r\n\r\nexport { createDot };\r\n","class Cell {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.dots = [];\r\n    }\r\n\r\n    intersects(point) {\r\n        return (\r\n            point.x >= this.x && point.y >= this.y && point.x < this.x + this.width && point.y < this.y + this.height\r\n        );\r\n    }\r\n}\r\n\r\nclass Grid {\r\n    constructor(canvas, maxDistance) {\r\n        this.cells = [];\r\n        this.maxDistance = (maxDistance / 1.5) * Math.sqrt(2);\r\n\r\n        this.rows = 0;\r\n        this.columns = 0;\r\n\r\n        this.init(canvas);\r\n    }\r\n\r\n    init(canvas) {\r\n        this.cells = [];\r\n        this.columns = Math.ceil(canvas.width / this.maxDistance); // X\r\n        this.rows = Math.ceil(canvas.height / this.maxDistance); // Y\r\n        for (let i = 0; i < this.rows * this.columns; i++) {\r\n            let x = (i % this.columns) * this.maxDistance;\r\n            let y = Math.floor(i / this.columns) * this.maxDistance;\r\n            let width = Math.min(x + this.maxDistance, canvas.width) - x;\r\n            let height = Math.min(y + this.maxDistance, canvas.height) - y;\r\n            this.cells.push(new Cell(x, y, width, height));\r\n        }\r\n    }\r\n\r\n    populate(dots) {\r\n        for (const dot of dots) {\r\n            this.addDot(dot);\r\n        }\r\n    }\r\n\r\n    addDot(dot) {\r\n        let x = Math.floor(dot.pos.x / this.maxDistance);\r\n        let y = Math.floor(dot.pos.y / this.maxDistance);\r\n        let cell = this.cells[y * this.columns + x];\r\n        if (!cell) {\r\n            console.error(\"Dot did not get populated. Could not find a cell.\", dot, y, x);\r\n        } else {\r\n            cell.dots.push(dot);\r\n        }\r\n    }\r\n\r\n    removeDot(dot) {\r\n        let cell = this.getCell(Math.floor(dot.pos.x / this.maxDistance), Math.floor(dot.pos.y / this.maxDistance));\r\n        cell.dots.splice(cell.dots.indexOf(dot), 1);\r\n    }\r\n\r\n    getCell(x, y) {\r\n        return this.cells[y * this.columns + x];\r\n    }\r\n\r\n    getCoordsByIndex(index) {\r\n        return { x: index % this.columns, y: Math.floor(index / this.columns) };\r\n    }\r\n\r\n    getCellNeighbours(index) {\r\n        /*\r\n            [ ][ ][*]\r\n            [ ][x][*]\r\n            [ ][*][*]\r\n        */\r\n        let { x, y } = this.getCoordsByIndex(index);\r\n        let cells = [];\r\n        let xBoundary = x + 1 < this.columns;\r\n        let yBoundary = y + 1 < this.rows;\r\n        if (xBoundary) {\r\n            cells.push(this.getCell(x + 1, y));\r\n            if (y > 0) cells.push(this.getCell(x + 1, y - 1));\r\n        }\r\n        if (yBoundary) {\r\n            cells.push(this.getCell(x, y + 1));\r\n        }\r\n        if (xBoundary && yBoundary) {\r\n            cells.push(this.getCell(x + 1, y + 1));\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    update() {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            let cell = this.cells[i];\r\n\r\n            for (let j = 0; j < cell.dots.length; j++) {\r\n                let dot = cell.dots[j];\r\n                if (!cell.intersects(dot.pos)) {\r\n                    cell.dots.splice(cell.dots.indexOf(dot), 1);\r\n                    this.addDot(dot);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import { createDot } from \"./Dots/Dot\";\r\nimport Grid from \"./Dots/Grid\";\r\n\r\nlet Dots = [];\r\nlet grid = null;\r\n\r\nconst updateCount = (context, dots) => {\r\n    if (Dots.length > dots.count) {\r\n        for (let i = Dots.length - 1; i > dots.count - 1; i--) {\r\n            grid.removeDot(Dots[i]);\r\n        }\r\n        Dots.length = dots.count;\r\n    } else {\r\n        for (let i = Dots.length; i < dots.count; i++) {\r\n            const dot = createDot(context.canvas);\r\n            Dots.push(dot);\r\n            if (grid !== null) grid.addDot(dot);\r\n        }\r\n    }\r\n};\r\n\r\nconst connectDots = (context, dot1, dot2, maxDistance, curve) => {\r\n    let distance = Math.sqrt((dot2.pos.x - dot1.pos.x) ** 2 + (dot2.pos.y - dot1.pos.y) ** 2);\r\n\r\n    if (distance > maxDistance) {\r\n        /*\r\n            I have been debugging for hours.\r\n            I have no clue why or how.\r\n            But sometimes. Very very rarely.\r\n            When point jumps across the screen.\r\n            It's position is clearly on the other side of the screen.\r\n            But it is contained within previous cell.\r\n            I have no idea how it is possible. Because points update their location\r\n            and then cells check if all dots are still within their boundaries.\r\n            But it happens. Fixes itself next render.\r\n            I want to cry now.\r\n        */\r\n        return;\r\n    }\r\n\r\n    let alpha = Math.floor(255 - (255 * distance) / maxDistance)\r\n        .toString(16)\r\n        .padStart(2, \"0\");\r\n    let color = context.createLinearGradient(dot1.pos.x, dot1.pos.y, dot2.pos.x, dot2.pos.y);\r\n    color.addColorStop(0, dot1.color + alpha);\r\n    color.addColorStop(1, dot2.color + alpha);\r\n    context.strokeStyle = color;\r\n    context.lineWidth = (1 - distance / maxDistance + 0.2) * 4;\r\n    context.lineCap = \"round\";\r\n    if (curve) {\r\n        connectDotsCurved(context, dot1, dot2, distance, maxDistance, curve);\r\n    } else {\r\n        connectDotsLine(context, dot1, dot2);\r\n    }\r\n};\r\n\r\nconst connectDotsLine = (context, dot1, dot2) => {\r\n    context.beginPath();\r\n    context.moveTo(dot1.pos.x, dot1.pos.y);\r\n    context.lineTo(dot2.pos.x, dot2.pos.y);\r\n    context.stroke();\r\n};\r\n\r\nconst connectDotsCurved = (context, dot1, dot2, distance, maxDistance, curve) => {\r\n    context.beginPath();\r\n    context.moveTo(dot1.pos.x, dot1.pos.y);\r\n    context.bezierCurveTo(\r\n        ...dot1.getBezier((distance / maxDistance) * curve),\r\n        ...dot2.getBezier((distance / maxDistance) * curve),\r\n        dot2.pos.x,\r\n        dot2.pos.y\r\n    );\r\n    context.stroke();\r\n};\r\n\r\nconst connectNew = (context, maxDistance, curve) => {\r\n    for (let i = 0; i < grid.cells.length; i++) {\r\n        const cell = grid.cells[i];\r\n        const neighbours = grid.getCellNeighbours(i);\r\n\r\n        for (let j = 0; j < cell.dots.length; j++) {\r\n            let dot1 = cell.dots[j];\r\n            // within itself\r\n            for (let k = j; k < cell.dots.length; k++) {\r\n                let dot2 = cell.dots[k];\r\n                connectDots(context, dot1, dot2, maxDistance, curve);\r\n            }\r\n\r\n            // outside itself\r\n            for (let k = 0; k < neighbours.length; k++) {\r\n                let neighbour = neighbours[k];\r\n                for (let z = 0; z < neighbour.dots.length; z++) {\r\n                    let dot2 = neighbour.dots[z];\r\n                    connectDots(context, dot1, dot2, maxDistance, curve);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nlet lastSpeed = 0;\r\nlet lastDistance = 0;\r\nconst updateProperties = (context, dots, needsUpdate) => {\r\n    if (Dots.length !== dots.count) {\r\n        updateCount(context, dots);\r\n    }\r\n\r\n    if (lastSpeed !== dots.speed) {\r\n        Dots.map((dot) => dot.setVelocity(dots.speed));\r\n        lastSpeed = dots.speed;\r\n    }\r\n\r\n    if (needsUpdate || lastDistance !== dots.maxDistance) {\r\n        grid = new Grid(context.canvas, dots.maxDistance);\r\n        grid.populate(Dots);\r\n        lastDistance = dots.maxDistance;\r\n    }\r\n};\r\n\r\nconst updateDots = (context, dots, needsUpdate) => {\r\n    updateProperties(context, dots, needsUpdate);\r\n\r\n    context.fillStyle = \"#000\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n    //dots\r\n    for (const dot of Dots) {\r\n        dot.update(context.canvas);\r\n        if (dots.showDots) dot.render(context);\r\n    }\r\n\r\n    grid.update();\r\n\r\n    //grid\r\n    if (dots.showGrid) {\r\n        for (let i = 0; i < grid.cells.length; i++) {\r\n            let { x, y, width, height } = grid.cells[i];\r\n            context.lineWidth = 2;\r\n            context.strokeStyle = \"red\";\r\n            context.strokeRect(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    //lines\r\n    context.fillStyle = \"#000000\";\r\n    context.lineWidth = 2;\r\n    connectNew(context, dots.maxDistance, dots.curve);\r\n};\r\n\r\nexport { updateDots };\r\n","let pattern = null;\r\nconst updatePattern = (context, image) => {\r\n    console.log(\"new pattern\");\r\n    pattern = context.createPattern(image, \"repeat\");\r\n};\r\n\r\nlet image = new Image();\r\n\r\nlet offsetX = 0;\r\nlet offsetY = 0;\r\n\r\nlet scalingX = 1;\r\nlet scalingY = 1;\r\n\r\nconst draw = (context, { speedX, speedY, scale, clampX, clampY }) => {\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n    context.fillStyle = pattern;\r\n\r\n    if (speedX) {\r\n        offsetX += speedX;\r\n        //offsetX %= context.canvas.width;\r\n    }\r\n    if (speedY) {\r\n        offsetY += speedY;\r\n        //offsetY %= context.canvas.height;\r\n    }\r\n\r\n    if (scale) {\r\n        if (context.canvas.width <= image.width) {\r\n            if (clampX) {\r\n                scalingX = image.width / context.canvas.width;\r\n            } else {\r\n                scalingX = 1;\r\n            }\r\n        } else {\r\n            scalingX = context.canvas.width / image.width;\r\n        }\r\n        if (context.canvas.height <= image.height) {\r\n            if (clampY) {\r\n                scalingY = image.height / context.canvas.height;\r\n            } else {\r\n                scalingY = 1;\r\n            }\r\n        } else {\r\n            scalingY = context.canvas.height / image.height;\r\n        }\r\n        context.setTransform(scalingX, 0, 0, scalingY, offsetX, offsetY);\r\n        context.fillRect(-offsetX / scalingX, -offsetY / scalingY, context.canvas.width, context.canvas.height);\r\n        context.resetTransform();\r\n    } else {\r\n        context.translate(offsetX, offsetY);\r\n        context.fillRect(-offsetX, -offsetY, context.canvas.width, context.canvas.height);\r\n        context.translate(-offsetX, -offsetY);\r\n    }\r\n};\r\n\r\nlet prevURL = \"\";\r\nconst updateImage = (context, { imageUrl, ...Storage }) => {\r\n    if (imageUrl !== prevURL) {\r\n        // code\r\n        image = new Image(); // could be removed?\r\n        image.onload = () => {\r\n            updatePattern(context, image);\r\n        };\r\n        image.src = imageUrl;\r\n        prevURL = imageUrl;\r\n    }\r\n\r\n    if (pattern !== null) {\r\n        draw(context, Storage);\r\n    }\r\n};\r\n\r\nexport { updateImage };\r\n","const createGradient = (context, canvas, floorHeight) => {\r\n    const grad = context.createLinearGradient(canvas.width / 2, floorHeight, canvas.width / 2, canvas.height);\r\n    grad.addColorStop(0, \"#C9B170\");\r\n    grad.addColorStop(0.5, \"#AE635F\");\r\n    grad.addColorStop(1, \"#BD0477\");\r\n    return grad;\r\n};\r\n\r\nconst drawLines = (context, canvas, offset, { floorHeight, amount, scaleX, scaleY }) => {\r\n    context.filter = \"blur(1px) drop-shadow(0px 0px 4px #BD0477)\";\r\n    context.lineWidth = 3;\r\n    context.beginPath();\r\n    for (let i = 0; i < amount; i++) {\r\n        let pixelOffset = -4 * (i / amount) + 1;\r\n        context.moveTo(pixelOffset + scaleX * i + scaleX * offset, floorHeight);\r\n\r\n        let x = scaleX * i * 2 - canvas.width / 2;\r\n        context.lineTo(pixelOffset + x + scaleX * 2 * offset, canvas.height);\r\n    }\r\n    context.stroke();\r\n\r\n    context.lineWidth = 2;\r\n    context.beginPath();\r\n    const height = (scaleY - floorHeight / amount) * 2;\r\n    for (let i = 0; i < amount / 2; i++) {\r\n        context.moveTo(0, floorHeight + height * i);\r\n        context.lineTo(canvas.width, floorHeight + height * i);\r\n    }\r\n    context.stroke();\r\n\r\n    context.filter = \"none\";\r\n};\r\n\r\nconst drawFloor = (context, canvas, store, frameCount) => {\r\n    const floorHeight = store.floorHeight * canvas.height;\r\n    const offset = (frameCount % 100) / 100;\r\n    const scaleX = canvas.width / store.numberOfLines;\r\n    const scaleY = canvas.height / store.numberOfLines;\r\n\r\n    context.fillStyle = \"#280A24\";\r\n    context.fillRect(0, floorHeight, canvas.width, canvas.height);\r\n\r\n    const grad = createGradient(context, canvas, floorHeight);\r\n\r\n    context.strokeStyle = grad;\r\n    drawLines(context, canvas, offset, { floorHeight, amount: store.numberOfLines, scaleX, scaleY });\r\n};\r\n\r\nexport { drawFloor };\r\n","const getBGGradient = (context, canvas) => {\r\n    const grad = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);\r\n    grad.addColorStop(0, \"black\");\r\n    grad.addColorStop(0.05, \"#100284\");\r\n    grad.addColorStop(0.1, \"#1103AD\");\r\n    grad.addColorStop(0.4, \"#370CBC\");\r\n    grad.addColorStop(0.5, \"#4B11C4\");\r\n    grad.addColorStop(0.7, \"#841EDA\");\r\n    return grad;\r\n};\r\n\r\nconst getSunBox = (canvas, floorHeight) => {\r\n    const sunSize = canvas.width / 4;\r\n    return {\r\n        x: canvas.width / 2 - sunSize / 2,\r\n        y: floorHeight * (canvas.height - sunSize * 0.2) - sunSize / 2,\r\n        width: sunSize,\r\n        height: sunSize,\r\n    };\r\n};\r\n\r\nconst getSunGradient = (context, sunBox) => {\r\n    const grad = context.createLinearGradient(\r\n        sunBox.x + sunBox.width / 2,\r\n        sunBox.y,\r\n        sunBox.x + sunBox.width / 2,\r\n        sunBox.y + sunBox.height\r\n    );\r\n    grad.addColorStop(0, \"#EC07A8\");\r\n    grad.addColorStop(0.2, \"#F683A4\");\r\n    grad.addColorStop(0.4, \"#F683A4\");\r\n    grad.addColorStop(0.7, \"#FEF9D3\");\r\n    grad.addColorStop(1, \"#FEF9D3\");\r\n    return grad;\r\n};\r\nconst getSunHazeGradient = (context, sunBox, alpha = \"A0\") => {\r\n    const grad = context.createLinearGradient(\r\n        sunBox.x + sunBox.width / 2,\r\n        sunBox.y,\r\n        sunBox.x + sunBox.width / 2,\r\n        sunBox.y + sunBox.height\r\n    );\r\n    grad.addColorStop(0, \"#A9071F\" + alpha);\r\n    grad.addColorStop(0.2, \"#C81023\" + alpha);\r\n    grad.addColorStop(0.4, \"#CF002F\" + alpha);\r\n    grad.addColorStop(0.7, \"#E80358\" + alpha);\r\n    grad.addColorStop(1, \"#D2065D\" + alpha);\r\n    return grad;\r\n};\r\n\r\nconst drawSun = (context, sunBox) => {\r\n    context.filter = \"blur(3px)\";\r\n    context.fillStyle = getSunGradient(context, sunBox);\r\n    context.beginPath();\r\n    context.arc(sunBox.x + sunBox.width / 2, sunBox.y + sunBox.height / 2, sunBox.width / 2, 0, Math.PI * 2);\r\n    context.fill();\r\n    context.filter = \"none\";\r\n};\r\n\r\nconst drawSunLines = (context, sunBox, frameCount) => {\r\n    context.filter = \"blur(1px)\";\r\n    const maxLineGap = 30;\r\n    const offset = (frameCount % 100) / 100;\r\n    const gaps = 20;\r\n\r\n    for (let i = 0; i < gaps; i++) {\r\n        let y = i * maxLineGap + offset * maxLineGap;\r\n        let height = (y / sunBox.height) ** 2 * maxLineGap;\r\n        context.fillRect(sunBox.x - 10, sunBox.y + 10 + y, sunBox.width + 20, height);\r\n    }\r\n    context.filter = \"none\";\r\n};\r\n\r\nconst drawSunHaze = (context, sunBox) => {\r\n    const alpha = \"80\";\r\n    context.globalCompositeOperation = \"hard-light\";\r\n    context.filter = \"blur(100px)\";\r\n    context.fillStyle = getSunHazeGradient(context, sunBox, alpha);\r\n    context.beginPath();\r\n    context.arc(sunBox.x + sunBox.width / 2, sunBox.y + sunBox.height / 2, sunBox.width / 2, 0, Math.PI * 2);\r\n    context.fill();\r\n    context.filter = \"none\";\r\n    context.globalCompositeOperation = \"source-over\";\r\n};\r\n\r\nconst drawBackground = (context, canvas, store, frameCount) => {\r\n    const grad = getBGGradient(context, canvas);\r\n    context.fillStyle = grad;\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    const sunBox = getSunBox(canvas, store.floorHeight);\r\n    drawSun(context, sunBox);\r\n    context.fillStyle = grad;\r\n    drawSunLines(context, sunBox, frameCount);\r\n    drawSunHaze(context, sunBox);\r\n};\r\n\r\nexport { drawBackground };\r\n","export default __webpack_public_path__ + \"static/media/house_sample.f6a686d9.png\";","import HousesImage from \"../../../../../content/house_sample.png\";\r\n\r\nlet housesImages = null;\r\n\r\nlet houseBox = {\r\n    width: 96,\r\n    height: 384,\r\n};\r\n\r\nlet housesImage = null;\r\n\r\nconst createHousesGradient = (content) => {\r\n    const grad = content.createLinearGradient(houseBox.width / 2, 0, houseBox.width / 2, houseBox.height);\r\n    grad.addColorStop(0, \"red\");\r\n    grad.addColorStop(1, \"blue\");\r\n    return grad;\r\n};\r\n\r\nconst removeWhite = (context) => {\r\n    let imageData = context.getImageData(0, 0, houseBox.width, houseBox.height);\r\n    let data = imageData.data;\r\n    for (let i = 0; i < data.length; i += 4) {\r\n        const [r, g, b] = [data[i], data[i + 1], data[i + 2]];\r\n        if (r === 255 && g === 255 && b === 255) {\r\n            data[i + 0] = 0;\r\n            data[i + 1] = 0;\r\n            data[i + 2] = 0;\r\n            data[i + 3] = 0;\r\n        }\r\n    }\r\n    context.putImageData(imageData, 0, 0);\r\n};\r\n\r\nconst loadImage = (url) => {\r\n    return new Promise((resolve) => {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.onload = () => resolve(image);\r\n    });\r\n};\r\n\r\nconst loadHouseImages = (urls) => {\r\n    let pendingImages = urls.map(loadImage);\r\n    Promise.all(pendingImages).then((images) => {\r\n        housesImages = [...images];\r\n    });\r\n};\r\n\r\nconst parseHouses = () => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const context = canvas.getContext(\"2d\");\r\n    canvas.width = houseBox.width;\r\n    canvas.height = houseBox.height;\r\n    const gradient = createHousesGradient(context);\r\n    context.fillStyle = gradient;\r\n\r\n    let imageURLs = [];\r\n    for (let i = 0; i < housesImage.width / houseBox.width; i++) {\r\n        context.fillRect(0, 0, houseBox.width, houseBox.height);\r\n        context.drawImage(\r\n            housesImage,\r\n            i * houseBox.width,\r\n            0,\r\n            houseBox.width,\r\n            houseBox.height,\r\n            0,\r\n            0,\r\n            houseBox.width,\r\n            houseBox.height\r\n        );\r\n        removeWhite(context);\r\n        imageURLs.push(canvas.toDataURL());\r\n    }\r\n    loadHouseImages(imageURLs);\r\n};\r\n\r\nconst loadHouses = () => {\r\n    housesImage = new Image();\r\n    housesImage.src = HousesImage;\r\n    housesImage.onload = parseHouses;\r\n};\r\n\r\nexport { housesImages, housesImage, houseBox, loadHouses };\r\n","import { housesImages, loadHouses, housesImage, houseBox } from \"./houseLoading\";\r\n\r\nlet housesCache = null;\r\nlet oldCount = 0;\r\n\r\nconst addHousesToCache = (amount) => {\r\n    for (let i = 0; i < amount; i++) {\r\n        housesCache.push(Math.floor(Math.random() * (housesImages.length + 1)) - 1);\r\n    }\r\n};\r\n\r\nconst processCache = (numberOfLines) => {\r\n    if (oldCount === numberOfLines) return;\r\n\r\n    if (housesCache === null) {\r\n        housesCache = [];\r\n        addHousesToCache(numberOfLines);\r\n    } else {\r\n        if (oldCount < numberOfLines) {\r\n            addHousesToCache(numberOfLines - oldCount);\r\n        } else {\r\n            //housesCache.length = numberOfLines; // it works but feels cheap\r\n            housesCache = housesCache.slice(0, numberOfLines);\r\n        }\r\n    }\r\n\r\n    oldCount = numberOfLines;\r\n};\r\n\r\nconst draw = (context, scale, floorHeight, offset) => {\r\n    let width = scale;\r\n    let height = (houseBox.height / houseBox.width) * width;\r\n    for (let i = 0; i < housesCache.length; i++) {\r\n        let houseIndex = housesCache[i];\r\n\r\n        // add empty houses\r\n        if (houseIndex === -1) {\r\n            continue;\r\n        }\r\n        let house = housesImages[houseIndex];\r\n        context.drawImage(\r\n            house,\r\n            0,\r\n            0,\r\n            houseBox.width,\r\n            houseBox.height,\r\n            (i - 1) * scale + scale * offset,\r\n            floorHeight - height,\r\n            width + 1,\r\n            height\r\n        );\r\n    }\r\n};\r\n\r\nlet oldOffset = 0;\r\nconst shouldUpdate = (offset) => {\r\n    const update = Math.abs(oldOffset - offset) > 0.9;\r\n    oldOffset = offset;\r\n    return update;\r\n};\r\n\r\nconst drawHouses = (context, canvas, store, frameCount) => {\r\n    if (housesImage == null) {\r\n        loadHouses();\r\n        return;\r\n    }\r\n    if (housesImages === null) {\r\n        // waiting for the houses to load.\r\n        return;\r\n    }\r\n\r\n    processCache(store.numberOfLines + 1);\r\n    const scale = canvas.width / store.numberOfLines;\r\n    const offset = (frameCount % 100) / 100;\r\n    const floorHeight = store.floorHeight * canvas.height;\r\n\r\n    if (shouldUpdate(offset)) {\r\n        housesCache.unshift(housesCache.pop());\r\n    }\r\n\r\n    draw(context, scale, floorHeight, offset);\r\n};\r\n\r\nexport { drawHouses };\r\n","import { drawFloor } from \"./Synthwave/floor\";\r\nimport { drawBackground } from \"./Synthwave/background\";\r\nimport { drawHouses } from \"./Synthwave/houses\";\r\n\r\nconst updateSynth = (context, store, frameCount) => {\r\n    let args = [context, context.canvas, store, frameCount];\r\n    drawBackground(...args);\r\n    drawHouses(...args);\r\n    context.globalAlpha = 0.9;\r\n    drawFloor(...args);\r\n    context.globalAlpha = 1;\r\n};\r\n\r\nexport { updateSynth };\r\n","import { createGradient } from \"./display modes/gradient\";\r\nimport { createBlinking } from \"./display modes/blinking\";\r\nimport { createRadial } from \"./display modes/radial\";\r\nimport { updateDots } from \"./display modes/dots\";\r\nimport { updateImage } from \"./display modes/image\";\r\nimport { updateSynth } from \"./display modes/synthwave\";\r\n\r\nconst drawDebug = (context, frameCount) => {\r\n    const canvas = context.canvas;\r\n    let radius = 80;\r\n    context.fillStyle = \"#ffffffa0\";\r\n    context.beginPath();\r\n    context.arc(\r\n        canvas.width - radius - 10,\r\n        canvas.height - radius - 10,\r\n        radius * Math.sin(frameCount * 0.05) ** 2,\r\n        0,\r\n        2 * Math.PI\r\n    );\r\n    context.fill();\r\n};\r\n\r\nconst drawDefault = (context) => {\r\n    const canvas = context.canvas;\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    context.font = \"48px courier\";\r\n    context.textAlign = \"center\";\r\n    context.fillStyle = \"white\";\r\n    context.fillText(\"No input\", canvas.width / 2, canvas.height / 2);\r\n};\r\n\r\nconst createFillStyle = (context, storage, frameCount) => {\r\n    switch (storage.config.mode) {\r\n        case \"Gradient\":\r\n            return createGradient(context, storage.gradient, frameCount);\r\n        case \"Blinking\":\r\n            return createBlinking(context, storage.gradient, frameCount);\r\n        case \"Radial\":\r\n            return createRadial(context, storage.gradient, frameCount);\r\n        default: {\r\n            return null;\r\n        }\r\n    }\r\n};\r\n\r\nconst getDrawType = (mode) => {\r\n    switch (mode) {\r\n        case \"Gradient\":\r\n        case \"Blinking\":\r\n        case \"Radial\": {\r\n            return \"fillstyle\";\r\n        }\r\n\r\n        case \"Image\": {\r\n            return \"pattern\";\r\n        }\r\n\r\n        case \"Dots\":\r\n        case \"Synthwave\": {\r\n            return \"update\";\r\n        }\r\n\r\n        default: {\r\n            return \"unknown\";\r\n        }\r\n    }\r\n};\r\n\r\nconst drawUpdate = (context, storage, frameCount, needsUpdate = false) => {\r\n    const canvas = context.canvas;\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    switch (storage.config.mode) {\r\n        case \"Dots\": {\r\n            updateDots(context, storage.dots, needsUpdate);\r\n            break;\r\n        }\r\n        case \"Image\": {\r\n            updateImage(context, storage.image);\r\n            break;\r\n        }\r\n        case \"Synthwave\": {\r\n            updateSynth(context, storage.synth, frameCount);\r\n            break;\r\n        }\r\n        default: {\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\nlet prevMode = \"\";\r\nlet prevDimensions = { width: 0, height: 0 };\r\nconst CanvasUpdate = (context, frameCount, storage) => {\r\n    if (prevMode !== storage.config.mode) {\r\n        prevMode = storage.config.mode;\r\n        // this is absolutely retarded, but without this code, drawing slows down to 10fps\r\n        let temp = context.canvas.width;\r\n        context.canvas.width = 0;\r\n        context.canvas.width = temp;\r\n    }\r\n    let needsUpdate = context.canvas.width !== prevDimensions.width || context.canvas.height !== prevDimensions.height;\r\n    if (needsUpdate) {\r\n        prevDimensions.width = context.canvas.width;\r\n        prevDimensions.height = context.canvas.height;\r\n    }\r\n\r\n    drawDefault(context);\r\n\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        let fillStyle = createFillStyle(context, storage, frameCount);\r\n        if (fillStyle !== null) {\r\n            context.fillStyle = fillStyle;\r\n            drawUpdate(context, storage);\r\n        }\r\n    } else if (type === \"update\") {\r\n        drawUpdate(context, storage, frameCount, needsUpdate);\r\n    } else if (type === \"pattern\") {\r\n        drawUpdate(context, storage);\r\n    }\r\n\r\n    if (storage.config.debug) {\r\n        drawDebug(context, frameCount);\r\n    }\r\n};\r\n\r\nexport default CanvasUpdate;\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\n//fix: Transition between colors is flickering when there are only few colors\r\nconst createGradient = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Gradient\");\r\n};\r\n\r\nexport { createGradient };\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\nconst createBlinking = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Blinking\");\r\n};\r\n\r\nexport { createBlinking };\r\n","import { getRadius, addColorStops, getSpeed } from \"../GradientFactory\";\r\n\r\nconst getRadialGradient = (context, radius) => {\r\n    let canvas = context.canvas;\r\n    return context.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radius\r\n    );\r\n};\r\n\r\nconst createRadial = (context, storeGradient, frameCount) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, \"Radial\");\r\n    const gradient = getRadialGradient(context, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, storeGradient.speed), storeGradient.colors);\r\n};\r\n\r\nexport { createRadial };\r\n","import React from \"react\";\r\n\r\nimport useWindowSize from \"./windowSize\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport CanvasUpdate from \"../drawing/canvasUpdate\";\r\n\r\nconst Canvas = () => {\r\n    const [width, height] = useWindowSize();\r\n    const canvasRef = useCanvas(CanvasUpdate);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\n\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst Display = () => {\r\n    return <Canvas />;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Checkbox } from \"@mui/material\";\r\n\r\nimport { AnimatedSettingsOverlay } from \"./settings/SettingsOverlay\";\r\nimport Display from \"./display/canvas/Display\";\r\n\r\nconst MainContainer = () => {\r\n    const [checked, setCheck] = useState(true);\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    bottom: 7,\r\n                    left: 7,\r\n                }}\r\n                checked={checked}\r\n                onChange={({ target }) => setCheck(target.checked)}\r\n            />\r\n            <AnimatedSettingsOverlay active={checked} />\r\n            <Display />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\n\r\nimport MainContainer from \"./components/MainContainer\";\r\n\r\nimport { RecoilRoot } from \"recoil\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        mode: \"dark\",\r\n    },\r\n    spacing: 8,\r\n});\r\n\r\nconst App = () => {\r\n    return (\r\n        <React.StrictMode>\r\n            <RecoilRoot>\r\n                <ThemeProvider theme={theme}>\r\n                    <CssBaseline />\r\n                    <MainContainer />\r\n                </ThemeProvider>\r\n            </RecoilRoot>\r\n        </React.StrictMode>\r\n    );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}